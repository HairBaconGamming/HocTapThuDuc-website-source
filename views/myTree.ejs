<%- include('partials/header', { title: title, user: user, activePage: activePage }) %>
<link rel="stylesheet" href="/css/myTree.css">   <%# Specific styles for this page %>
<section class="my-tree-page-section">

    <!-- Background Effects -->
    <div class="tree-background">
        <div id="tree-particles-bg"></div> <%# tsparticles background %>
        <div class="tree-bg-glow glow-bottom"></div>
        <div class="tree-bg-glow glow-top-left"></div>
    </div>

    <div class="container tree-container">

        <!-- Page Header -->
        <div class="tree-page-header" data-animate="fade-down">
            <h1><i class="fas fa-seedling"></i> Cây Thành Tài</h1>
            <p>Nỗ lực hôm nay, vươn tới ngày mai. Cây của bạn lớn lên cùng kiến thức!</p>
        </div>

        <!-- Tree Visualization Area -->
        <div class="tree-visualization-area" data-animate="zoom-in">
            <%# Container holds the tree IMAGE and overlays %>
            <%
                // Helper function to get the correct image URL or state based on level
                const getTreeVisualInfo = (level) => {
                    const baseImageUrls = [
                        // NOTE: Array index 0 is unused if levels start at 1.
                        // Add a placeholder or Level 1 image for Level 0 if needed.
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/1.png?v=1744298734775", // Placeholder/Level 0?
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/1.png?v=1744298734775", // Level 1
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/2.png?v=1744298740440", // Level 2
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/3.png?v=1744298743347", // Level 3
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/4.png?v=1744298746733", // Level 4
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/5.png?v=1744298748767", // Level 5
                        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/6.png?v=1744298751393"  // Level 6
                    ];
                    const maxImageLevel = 6;
                    const currentLevel = level || 0;
                    let imageUrl = baseImageUrls[Math.min(currentLevel, maxImageLevel)];
                    let extraClass = '';

                    if (currentLevel === 7) {
                        imageUrl = baseImageUrls[maxImageLevel]; // Use Level 6 image as base
                        extraClass = 'level-7-cosmic-aura';
                    } else if (currentLevel >= 8) {
                        imageUrl = baseImageUrls[maxImageLevel]; // Use Level 6 image as base
                        extraClass = 'level-8-cosmic-tree';
                    }

                    return {
                        src: imageUrl || baseImageUrls[1], // Default to level 1 if something goes wrong
                        className: `tree-image-container level-${currentLevel} ${extraClass}`.trim()
                    };
                };
                const initialLevel = treeData.treeLevel || 0;
                const visualInfo = getTreeVisualInfo(initialLevel);
            %>
            <div class="<%= visualInfo.className %>" id="treeImageContainer">
                <%# --- Tree Image --- %>
                <img src="<%= visualInfo.src %>" alt="Cây Thành Tài - Cấp <%= initialLevel %>" id="treeImage" class="tree-visual">

                 <%# --- Overlays for effects --- %>
                 <div class="tree-overlays">
                     <div class="tree-base-glow"></div> <%# Keep the ground glow %>
                     <div id="tree-growth-particles"></div> <%# Target for JS particles (renamed for clarity) %>
                     <div class="tree-magic-aura"></div> <%# Aura for levels 7 & 8 %>
                     <div class="tree-cosmic-effects"></div> <%# Extra layer for complex effects Lvl 8 %>
                 </div>
            </div>
        </div>

        <!-- Progress and Stats Area -->
        <div class="tree-progress-stats" data-animate="fade-up" data-anim-delay="0.3">
            <%# --- EJS Calculation for progress (Keep as is) --- %>
            <%
                const currentLevel = treeData.treeLevel || 0;
                const growthPoints = treeData.growthPoints || 0;
                // Define thresholds here - MAKE SURE THESE MATCH JS/BACKEND
                const TREE_LEVEL_THRESHOLDS_EJS = [0, 50, 150, 350, 700, 1200, 2000, 3000]; // Added Level 7 threshold
                const MAX_TREE_LEVEL_EJS = TREE_LEVEL_THRESHOLDS_EJS.length - 1; // Now Max is 7 (index) for Level 8

                const pointsForCurrentLevel = currentLevel <= 0 ? 0 : (currentLevel > MAX_TREE_LEVEL_EJS ? TREE_LEVEL_THRESHOLDS_EJS[MAX_TREE_LEVEL_EJS] : TREE_LEVEL_THRESHOLDS_EJS[currentLevel]);
                // Adjust logic slightly for level 8 display
                const pointsForNextLevel = currentLevel >= MAX_TREE_LEVEL_EJS ? Infinity : TREE_LEVEL_THRESHOLDS_EJS[currentLevel + 1];

                let progressPercent = 0;
                let progressText = `Đã đạt cấp độ tối đa!`;
                if (pointsForNextLevel !== Infinity && pointsForNextLevel > pointsForCurrentLevel) {
                     const pointsInLevel = growthPoints - pointsForCurrentLevel;
                     const pointsNeededForLevel = pointsForNextLevel - pointsForCurrentLevel;
                     progressPercent = Math.max(0, Math.min(100, (pointsInLevel / pointsNeededForLevel) * 100));
                     progressText = `${pointsInLevel.toLocaleString()} / ${pointsNeededForLevel.toLocaleString()} điểm tới cấp ${currentLevel + 1}`;
                } else if (currentLevel < MAX_TREE_LEVEL_EJS) { // If max level isn't infinity yet
                     // This case might not be hit often if max level is handled above
                     const nextThresh = TREE_LEVEL_THRESHOLDS_EJS[currentLevel + 1];
                     const pointsNeeded = nextThresh - pointsForCurrentLevel;
                     progressPercent = 0;
                     progressText = `0 / ${pointsNeeded.toLocaleString()} điểm tới cấp ${currentLevel + 1}`;
                } else { // At Max Level (Level 8+)
                    progressText = `Cây Vũ Trụ Vĩnh Hằng!`; // Special text for max
                }
            %>
            <div class="level-display">
                Cấp độ: <span id="currentLevelDisplay" class="level-value"><%= currentLevel %></span>
            </div>
            <div class="progress-bar-tree">
                 <div class="progress-info">
                     <span>Tiến độ</span>
                     <span id="progressTextDisplay"><%= progressText %></span>
                 </div>
                <div class="progress-track">
                    <div class="progress-fill-tree" id="treeProgressBarFill" style="width: <%= progressPercent.toFixed(1) %>%;"></div>
                </div>
            </div>
            <div class="total-points-display">
                Tổng điểm: <span id="totalGrowthPoints" data-points="<%= growthPoints %>" class="points-value"><%= growthPoints.toLocaleString() %></span>
            </div>
        </div>

    </div> <!-- End .tree-container -->

</section>

<%- include('partials/footer') %>

<!-- JS Libraries (Keep as is) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/tsparticles@2.9.3/tsparticles.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/alerts.js"></script>

<!-- Page Specific JS (Needs significant updates) -->
<script>
// --- MY TREE MASTERPIECE SCRIPT (Image Version) ---
document.addEventListener('DOMContentLoaded', () => {
    // --- Config & Refs ---
    if (typeof gsap === 'undefined' || typeof tsParticles === 'undefined' || typeof io === 'undefined') {
        console.error("GSAP, tsParticles, or Socket.IO not loaded!"); return;
    }
    gsap.registerPlugin(ScrollTrigger);
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // --- EJS Data passed to JS ---
    const initialTreeData = <%- JSON.stringify(treeData || { treeLevel: 0, growthPoints: 0 }) %>;
    const loggedInUserId = "<%= user ? user._id : '' %>";

    // --- Constants ---
    // MAKE SURE THESE MATCH EJS/BACKEND
    const TREE_LEVEL_THRESHOLDS = [0, 50, 150, 350, 700, 1200, 2000, 3000]; // Level 0-7 thresholds (Level 8 is index 7)
    const MAX_TREE_LEVEL = TREE_LEVEL_THRESHOLDS.length - 1; // Max level is 8
    const MAX_IMAGE_LEVEL = 6; // Last level with a distinct static image

    const TREE_IMAGE_URLS = [
        // Use Level 1 image for Level 0 placeholder
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/1.png?v=1744298734775", // Level 0 (use Lvl 1)
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/1.png?v=1744298734775", // Level 1
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/2.png?v=1744298740440", // Level 2
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/3.png?v=1744298743347", // Level 3
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/4.png?v=1744298746733", // Level 4
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/5.png?v=1744298748767", // Level 5
        "https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/6.png?v=1744298751393"  // Level 6
        // Levels 7 and 8 will reuse the Level 6 image and add effects via CSS/JS
    ];

    // --- Element Refs ---
    const elements = {
        treeImageContainer: document.getElementById('treeImageContainer'),
        treeImage: document.getElementById('treeImage'),
        levelDisplay: document.getElementById('currentLevelDisplay'),
        progressBarFill: document.getElementById('treeProgressBarFill'),
        progressText: document.getElementById('progressTextDisplay'),
        totalPointsDisplay: document.getElementById('totalGrowthPoints'),
        growthParticleTarget: document.getElementById('tree-growth-particles'), // Updated ID ref
        treeBaseGlow: document.querySelector('.tree-base-glow'),
        magicAura: document.querySelector('.tree-magic-aura'), // Ref for aura
        cosmicEffects: document.querySelector('.tree-cosmic-effects'), // Ref for Lvl 8 effects
    };

    // --- State Variables ---
    let currentLevel = initialTreeData.treeLevel || 0;
    let currentPoints = initialTreeData.growthPoints || 0;
    let currentPointsForLevel = getPointsForCurrentLevel(currentLevel);
    let currentPointsForNext = getPointsForNextLevel(currentLevel);
    let growthParticleInstance = null;
    let isAnimatingLevelUp = false; // Prevent multiple rapid animations

    // --- Initialize ---
    initTreeBackgroundParticles();
    initEntranceAnimations(); // Will call setTreeVisualLevel initially
    initSocketConnection();
    animateTotalPoints(currentPoints); // Initial animation

    // ==================================
    // UTILITY FUNCTIONS (Client-side version)
    // ==================================
    function getPointsForNextLevel(level) { return level >= MAX_TREE_LEVEL ? Infinity : TREE_LEVEL_THRESHOLDS[level + 1]; }
    function getPointsForCurrentLevel(level) { return level <= 0 ? 0 : (level > MAX_TREE_LEVEL ? TREE_LEVEL_THRESHOLDS[MAX_TREE_LEVEL] : TREE_LEVEL_THRESHOLDS[level]); }

    function getTreeVisualInfoForLevel(level) {
        const displayLevel = level || 0;
        let imageIndex = Math.min(displayLevel, MAX_IMAGE_LEVEL);
        // Ensure index is valid (at least 0, use 1 if 0 is requested and index 0 isn't a specific image)
        if (imageIndex === 0 && TREE_IMAGE_URLS.length > 1) imageIndex = 1;
        imageIndex = Math.max(0, Math.min(imageIndex, TREE_IMAGE_URLS.length - 1)); // Clamp index

        let imageUrl = TREE_IMAGE_URLS[imageIndex];
        let extraClass = '';

        if (displayLevel === 7) {
            imageUrl = TREE_IMAGE_URLS[MAX_IMAGE_LEVEL]; // Use Level 6 image
            extraClass = 'level-7-cosmic-aura';
        } else if (displayLevel >= 8) {
            imageUrl = TREE_IMAGE_URLS[MAX_IMAGE_LEVEL]; // Use Level 6 image
            extraClass = 'level-8-cosmic-tree';
        }

        return {
            src: imageUrl,
            className: `tree-image-container level-${displayLevel} ${extraClass}`.trim()
        };
    }

    // ==================================
    // VISUAL UPDATES & ANIMATIONS
    // ==================================
    function initEntranceAnimations() {
        setTreeVisualLevel(currentLevel); // Set initial image and classes

        if (prefersReducedMotion) {
             gsap.set('[data-animate]', { autoAlpha: 1 });
             gsap.set(elements.treeImageContainer, { autoAlpha: 1 }); // Ensure image container visible
             animateProgressBar(currentPoints, currentLevel, currentPointsForLevel, currentPointsForNext);
             return;
         }
         // Set initial state for tree container (invisible before zoom)
         gsap.set(elements.treeImageContainer, { autoAlpha: 0, scale: 0.8 });

         const tl = gsap.timeline({delay: 0.2});
         tl.from('[data-animate="fade-down"]', { duration: 0.8, y: -30, autoAlpha: 0, ease: 'power2.out' })
           .to(elements.treeImageContainer, { // Animate the container (which holds the image)
                duration: 1.0, scale: 1, autoAlpha: 1, ease: 'power3.out'
            }, "-=0.5")
           .from(elements.treeBaseGlow, { duration: 1.5, scale: 0.5, autoAlpha: 0, ease: 'power2.out'}, "-=0.8")
           .from('[data-animate="fade-up"]', { duration: 0.8, y: 40, autoAlpha: 0, ease: 'power2.out'}, "-=0.6")
           .from(elements.progressBarFill, {
                width: '0%',
                duration: 1.2,
                ease: 'power2.out',
                // Run progress bar animation after tree is mostly visible
                 onStart: () => animateProgressBar(currentPoints, currentLevel, currentPointsForLevel, currentPointsForNext) // Calculate target width here
            }, "-=0.5");
    }

    function setTreeVisualLevel(level) {
        const visualInfo = getTreeVisualInfoForLevel(level);

        // Update Container Class for CSS-driven effects (Aura, Cosmic)
        if (elements.treeImageContainer) {
            elements.treeImageContainer.className = visualInfo.className;
        }

        // Update Image Source if it changed
        if (elements.treeImage && elements.treeImage.src !== visualInfo.src) {
            console.log(`Setting tree image src to: ${visualInfo.src} for level ${level}`);
            elements.treeImage.src = visualInfo.src;
            elements.treeImage.alt = `Cây Thành Tài - Cấp ${level}`;
        } else {
            console.log(`Keeping image src, updating classes for level ${level}`);
        }

        // Update Level Text Display
        if(elements.levelDisplay) elements.levelDisplay.textContent = level;

        // --- Special Effects Activation/Deactivation via CSS ---
        // The classes added to treeImageContainer handle this now.
        // Ensure your CSS targets these classes (`.level-7-cosmic-aura`, `.level-8-cosmic-tree`)
        // to style `.tree-magic-aura` and `.tree-cosmic-effects`.
    }

    function animateLevelUpVisual(newLevel, oldLevel) {
        if (prefersReducedMotion || isAnimatingLevelUp) return;
        isAnimatingLevelUp = true;
        console.log(`Animating Tree Level Up Visual from ${oldLevel} to ${newLevel}`);

        const oldVisualInfo = getTreeVisualInfoForLevel(oldLevel);
        const newVisualInfo = getTreeVisualInfoForLevel(newLevel);
        const imageActuallyChanged = oldVisualInfo.src !== newVisualInfo.src;
        const effectsChanged = oldVisualInfo.className !== newVisualInfo.className;

        // 1. Trigger Particle Burst
        triggerGrowthParticles(true); // Level up burst

        // 2. GSAP emphasis animation on the container
        const tl = gsap.timeline({
             onComplete: () => { isAnimatingLevelUp = false; }
        });

        tl.to(elements.treeImageContainer, { scale: 1.08, duration: 0.4, ease: 'power2.out' })
          .to(elements.treeBaseGlow, { scale: 1.3, opacity: 0.95, duration: 0.5, ease: 'power1.out' }, "-=0.3");

        // 3. Handle Image/Effect Swap (Fade out/in if needed)
        if (imageActuallyChanged || effectsChanged) {
            // Fade out the image slightly (optional, could just swap)
            // tl.to(elements.treeImage, { autoAlpha: 0.7, duration: 0.2 }, "-=0.4");

            // Add a slight delay or place the visual update mid-animation
            tl.add(() => {
                setTreeVisualLevel(newLevel); // Update src and classes
            }, ">-0.1"); // Place it shortly after the scale up starts

            // Fade back in (if faded out) or just ensure it's visible
            // tl.to(elements.treeImage, { autoAlpha: 1, duration: 0.3 }, ">");
        }

        // 4. Return to normal state
        tl.to(elements.treeImageContainer, { scale: 1, duration: 0.7, ease: 'bounce.out' })
          .to(elements.treeBaseGlow, { scale: 1, opacity: 0.6, duration: 0.6, ease: 'power1.out' }, "-=0.6");
    }

    // --- Other Animations (Keep animateTotalPoints, animateProgressBar largely the same) ---
    // Make sure animateProgressBar uses the updated MAX_TREE_LEVEL and thresholds
    function animateTotalPoints(newTotalPoints) {
        // (Keep the existing implementation - it works well)
        if (!elements.totalPointsDisplay) return;
        const targetPoints = newTotalPoints || 0;
        if(prefersReducedMotion) {
            elements.totalPointsDisplay.textContent = targetPoints.toLocaleString();
            return;
        }
         gsap.to(elements.totalPointsDisplay, {
             textContent: targetPoints, duration: 1.2, ease: "power1.out", snap: { textContent: 1 }, roundProps: "textContent",
             onUpdate: function() { this.targets()[0].textContent = parseInt(this.targets()[0].textContent).toLocaleString(); },
             onComplete: function() { this.targets()[0].textContent = targetPoints.toLocaleString(); }
         });
    }

    function animateProgressBar(newGrowthPoints, level, pointsCurrent, pointsNext) {
         if (!elements.progressBarFill || !elements.progressText) return;

         let progressPercent = 0;
         let progressText = `Cây Vũ Trụ Vĩnh Hằng!`; // Default for max

         if (level < MAX_TREE_LEVEL) { // Check if *not* max level
              if (pointsNext !== Infinity && pointsNext > pointsCurrent) {
                   const pointsInLevel = Math.max(0, newGrowthPoints - pointsCurrent);
                   const pointsNeededForLevel = pointsNext - pointsCurrent;
                   if (pointsNeededForLevel > 0) {
                      progressPercent = Math.max(0, Math.min(100, (pointsInLevel / pointsNeededForLevel) * 100));
                   } else {
                        progressPercent = 100; // Should not happen if pointsNext > pointsCurrent
                   }
                   progressText = `${pointsInLevel.toLocaleString()} / ${pointsNeededForLevel.toLocaleString()} điểm tới cấp ${level + 1}`;
              } else {
                   // Error case or level definition issue?
                   progressPercent = 0;
                   progressText = `0 / ??? điểm tới cấp ${level + 1}`;
                   console.warn("Could not calculate progress for level", level);
              }
         } else { // Is max level
             progressPercent = 100; // Bar is full at max level
         }

         elements.progressText.textContent = progressText;

         if(prefersReducedMotion){
             elements.progressBarFill.style.width = `${progressPercent.toFixed(1)}%`;
             return;
         }
         gsap.to(elements.progressBarFill, {
             width: `${progressPercent.toFixed(1)}%`, duration: 1.2, ease: 'power2.out'
         });
    }


    // ==================================
    // PARTICLES (tsParticles) - Keep implementations, adjust target ID if changed
    // ==================================
    function initTreeBackgroundParticles() { /* Keep implementation */
        if (prefersReducedMotion) return;
        const targetEl = document.getElementById('tree-particles-bg');
        if (!targetEl) return;
        tsParticles.load("tree-particles-bg", { fpsLimit: 45, particles: { number: { value: 35, density: { enable: true, value_area: 1000 } }, color: { value: ["#FFFFFF", "#a0a0c0", "#ccaaff"] }, shape: { type: "circle" }, opacity: { value: {min: 0.1, max: 0.3}, random: true, anim:{ enable: true, speed: 0.5, sync: false } }, size: { value: {min: 1, max: 2.5}, random: true }, links: { enable: false }, move: { enable: true, speed: 0.4, direction: "top-right", random: true, straight: false, outModes: { default: "out" } } }, interactivity: { enabled: false }, background: { color: "transparent" } })
            .catch(error => console.error("tsParticles background error:", error));
    }

    function triggerGrowthParticles(isLevelUp = false) { /* Keep implementation, check target ID */
        if (prefersReducedMotion || !elements.growthParticleTarget) return;
         if (growthParticleInstance) { growthParticleInstance.destroy(); growthParticleInstance = null; elements.growthParticleTarget.innerHTML = ''; }
        const particleConfig = {
             fpsLimit: 60, particles: { number: { value: isLevelUp ? 70 : 30 }, /* Increased */ color: { value: isLevelUp ? ["#FFD700", "#FF8C00", "#FFFFFF", "#FFFACD", "#00FFFF"] : ["#FFFFFF", "#a0a0c0", "#ccaaff"] }, /* Added cyan */ shape: { type: isLevelUp ? ["star", "circle"] : "circle" }, opacity: { value: {min: 0.6, max: 1}, random: true }, size: { value: {min: 1, max: isLevelUp ? 6 : 3.5}, random: true }, move: { enable: true, speed: isLevelUp ? {min: 5, max: 10} : {min: 3, max: 6}, direction: "top", angle: { value: 90, offset: 70 }, /* Wider */ random: true, straight: false, decay: 0.03, /* Slower decay */ outModes: { default: "destroy", top: "destroy" }, gravity: { enable: true, acceleration: isLevelUp ? -18 : -10 } /* Stronger push */ }, links: { enable: false }, life: { duration: { value: isLevelUp ? 1.5 : 0.9 }, count: 1 } /* Longer life */ }, interactivity: { enabled: false }, detectRetina: true, background: { color: "transparent" }, fullScreen: { enable: false },
             emitters: { position: { x: 50, y: 105 }, /* Slightly lower */ rate: { quantity: isLevelUp ? 70 : 30, delay: 0 }, life: { duration: 0.1, count: 1 }, size: { width: 90, height: 0 } /* Wider base */ }
        };
         tsParticles.load(elements.growthParticleTarget.id, particleConfig)
             .then(container => { growthParticleInstance = container; })
             .catch(error => console.error("tsParticles growth error:", error));
    }

    // ==================================
    // SOCKET.IO & DATA UPDATES
    // ==================================
    function initSocketConnection() {
        const socket = io();
        socket.on("connect", () => { console.log("MyTree: Socket connected", socket.id); if (loggedInUserId) { socket.emit('userConnect', loggedInUserId); } });
        socket.on("disconnect", (reason) => console.log("MyTree: Socket disconnected", reason));
        socket.on("connect_error", (err) => console.error("MyTree: Socket connection error", err));

        socket.on('treeUpdate', (updateData) => {
            console.log("Received treeUpdate:", updateData);
            const pointsGained = updateData.growthPoints > currentPoints;
            const levelIncreased = updateData.treeLevel > currentLevel;

            // Always update points state
            const previousPoints = currentPoints;
            currentPoints = updateData.growthPoints;

            if (!levelIncreased && pointsGained) { // Points gained, no level up yet
                 triggerGrowthParticles(false); // Normal growth particles
                 animateProgressBar(currentPoints, currentLevel, currentPointsForLevel, currentPointsForNext);
                 animateTotalPoints(currentPoints);
            } else if (levelIncreased) {
                // Level up occurred. Handle visual update in 'treeLevelUp' event.
                // We might update points display early, but progress bar waits for level up animation.
                 console.log("Level up detected in treeUpdate, waiting for treeLevelUp event.");
                 animateTotalPoints(currentPoints); // Update total points immediately
                 // Optionally, trigger small particles *now* before the big level-up burst later
                 // triggerGrowthParticles(false);
            }
            // If only level changed (e.g., admin adjustment) without points change, wait for treeLevelUp
        });

         socket.on('treeLevelUp', (levelData) => {
             console.log("Received treeLevelUp:", levelData);
             if (isAnimatingLevelUp) {
                 console.warn("Already animating level up, skipping duplicate event for level:", levelData.newLevel);
                 return; // Avoid triggering animation again if events arrive close together
             }

             const oldLevel = currentLevel;
             const newLevel = levelData.newLevel;

             // Update global state *before* visual update
             currentLevel = newLevel;
             currentPointsForLevel = getPointsForCurrentLevel(currentLevel);
             currentPointsForNext = getPointsForNextLevel(currentLevel);

             // Trigger Level Up Visual Animation (handles image/class swap + GSAP pop)
             animateLevelUpVisual(newLevel, oldLevel);

             // Update Progress Bar AFTER animation starts or completes for smoother feel
             // (animateLevelUpVisual handles setting the visual level text)
             // Let's update it after a short delay to let the pop happen first.
             setTimeout(() => {
                 animateProgressBar(currentPoints, currentLevel, currentPointsForLevel, currentPointsForNext);
             }, 300); // Delay progress bar update slightly


             // Show Achievement Notification
             if(typeof showAlert === 'function' && levelData.message) {
                 showAlert(levelData.message, levelData.levelName || 'Lên Cấp!', 'success', 7000);
             }
         });
    } // End initSocketConnection

}); // End DOMContentLoaded

</script>