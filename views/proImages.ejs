<!-- views/proImages.ejs -->
<%- include('partials/header', { title: 'Kho Ảnh PRO', user: user, activePage: 'proImages' }) %>
<link rel="stylesheet" href="/styleProImages.css"> 
<section class="pro-gallery-page-section"> <%# Unique Class %>

    <!-- Background Elements -->
    <div class="pro-gallery-background">
        <div class="bg-pattern-overlay"></div>
        <div class="bg-glow glow-1"></div>
        <div class="bg-glow glow-2"></div>
    </div>

    <div class="container pro-gallery-container">

        <!-- Page Header -->
        <div class="pro-gallery-header" data-animate="header-slide-down">
            <div class="header-icon-wrapper">
                <i class="fas fa-images"></i> <%# Icon for PRO Images %>
            </div>
            <div class="header-text">
                <h1>Kho Ảnh PRO Của Bạn</h1>
                <p>Quản lý, tải lên và chia sẻ hình ảnh chất lượng cao.</p>
            </div>
        </div>

        <!-- Storage Info & Upload Area - Combined Card -->
        <div class="manage-card" data-animate="card-fade-in" data-anim-delay="0.2">
            <div class="manage-card-header">
                 <h3>Quản lý Kho Lưu Trữ</h3>
            </div>
            <div class="manage-card-body">
                <!-- Storage Info -->
                <div class="storage-info-v2">
                    <div class="storage-details">
                         <span class="storage-label">Dung lượng đã dùng:</span>
                         <span class="storage-values">
                            <span id="usedCapacityV2" class="used-value">0 MB</span>
                            <span class="total-value"> / 50 MB</span>
                        </span>
                    </div>
                    <div class="progress-bar-v2">
                        <div class="progress-bar-track">
                             <div class="progress-bar-fill-v2" id="progressBarFillV2" style="width: 0%;"></div>
                             <span class="progress-percentage" id="progressPercentageV2">0%</span>
                        </div>
                    </div>
                    <div id="storageWarningV2" class="storage-warning-v2" style="display: none;"></div>
                </div>

                <hr class="manage-divider">

                <!-- Upload Area -->
                <div class="upload-area-v2">
                    <h4>Tải Ảnh Mới (Tối đa 1MB, tự động nén nếu lớn hơn)</h4>
                     <!-- File Picker & Drop Zone -->
                     <div class="file-drop-zone" id="fileDropZone">
                         <input type="file" id="imageInputV2" name="image" accept="image/*" class="file-input-hidden">
                         <label for="imageInputV2" class="file-drop-label">
                             <div class="drop-icon-idle"><i class="fas fa-cloud-upload-alt"></i></div>
                             <div class="drop-icon-active"><i class="fas fa-check-circle"></i></div>
                             <span class="drop-text-idle">Kéo & Thả ảnh vào đây hoặc <strong>Nhấn để chọn</strong></span>
                             <span class="drop-text-active">Đã chọn: <strong id="selectedFileName">Tên file</strong></span>
                             <span class="drop-text-hint">Bạn cũng có thể dán ảnh từ clipboard.</span>
                         </label>
                     </div>
                      <!-- Preview Area (Integrated or separate) -->
                     <div class="upload-preview-area" id="previewAreaV2">
                          <%# Preview shown here via JS %>
                          <span class="preview-placeholder">Xem trước ảnh</span>
                     </div>
                     <!-- Upload Button -->
                     <button type="button" class="btn-upload-v2" id="uploadBtnV2" disabled>
                         <span class="btn-text"><i class="fas fa-upload"></i> Tải Lên</span>
                         <span class="btn-progress-fill"></span>
                          <span class="btn-icon-success"><i class="fas fa-check"></i></span>
                         <span class="btn-icon-fail"><i class="fas fa-times"></i></span>
                     </button>
                     <!-- Upload Result Message -->
                     <br/>
                     <div id="uploadResultV2" class="upload-result-v2"></div>
                </div>
            </div>
        </div>


        <!-- Filter and Image List Section -->
        <div class="image-list-section" data-animate="fade-up" data-anim-delay="0.4">
             <div class="list-header">
                 <h3><i class="fas fa-th-large"></i> Bộ Sưu Tập Ảnh</h3>
                 <!-- Filter Area -->
                 <div class="filter-area-v2">
                     <div class="filter-group-v2">
                         <label for="sortOrderV2"><i class="fas fa-sort"></i></label>
                         <select id="sortOrderV2" class="filter-select-minimal">
                             <option value="desc">Mới nhất</option>
                             <option value="asc">Cũ nhất</option>
                         </select>
                     </div>
                     <div class="filter-group-v2">
                          <label for="typeFilterV2"><i class="fas fa-tag"></i></label>
                          <select id="typeFilterV2" class="filter-select-minimal">
                              <option value="">Loại ảnh</option>
                              <option value=".tiff">.tiff</option> <option value=".jfif">.jfif</option>
                              <option value=".bmp">.bmp</option> <option value=".pjp">.pjp</option>
                              <option value=".apng">.apng</option> <option value=".jpeg">.jpeg</option>
                              <option value=".png">.png</option> <option value=".webp">.webp</option>
                              <option value=".svgz">.svgz</option> <option value=".jpg">.jpg</option>
                              <option value=".heic">.heic</option> <option value=".gif">.gif</option>
                              <option value=".svg">.svg</option> <option value=".heif">.heif</option>
                              <option value=".ico">.ico</option> <option value=".xbm">.xbm</option>
                              <option value=".dib">.dib</option> <option value=".tif">.tif</option>
                              <option value=".pjpeg">.pjpeg</option> <option value=".avif">.avif</option>
                          </select>
                      </div>
                 </div>
             </div>

            <!-- Images List Grid -->
            <div id="imageListV2" class="image-gallery-grid">
                <%# Dynamically loaded image cards will appear here %>
                 <p class="loading-images-placeholder">Đang tải danh sách ảnh...</p>
            </div>
        </div>

    </div> <!-- End .pro-gallery-container -->

    <!-- Enhanced Lightbox Modal -->
    <div id="lightboxModalV2" class="lightbox-modal-v2">
        <div class="lightbox-backdrop"></div>
        <div class="lightbox-content-wrapper">
             <img class="lightbox-image" id="lightboxImgV2" src="" alt="Lightbox Image">
              <button class="lightbox-close-btn" aria-label="Đóng">×</button>
             <div class="lightbox-info">
                 <span id="lightboxCaptionV2"></span>
             </div>
             <%# Optional: Add Prev/Next buttons here %>
             <!-- <button class="lightbox-nav prev" aria-label="Ảnh trước"><i class="fas fa-chevron-left"></i></button> -->
             <!-- <button class="lightbox-nav next" aria-label="Ảnh kế tiếp"><i class="fas fa-chevron-right"></i></button> -->
        </div>
    </div>

     <!-- Drop Overlay for Drag and Drop -->
    <div id="dropOverlayV2" class="drop-overlay-v2">
        <div class="overlay-content">
            <i class="fas fa-images drop-icon"></i>
            <p>Thả ảnh vào đây để tải lên</p>
        </div>
    </div>

</section>

<%- include('partials/footer') %>

<!-- Page Specific JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
<script src="/js/alerts.js"></script>
<script src="/js/confirm.js"></script> <%# Assuming confirm.js provides showCustomConfirm %>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- GSAP & Config ---
    if (typeof gsap === 'undefined') { console.error("GSAP not loaded!"); return; }
    gsap.registerPlugin(ScrollTrigger);
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // --- Element References ---
    const imageInput = document.getElementById('imageInputV2');
    const previewArea = document.getElementById('previewAreaV2');
    const uploadBtn = document.getElementById('uploadBtnV2');
    const uploadResult = document.getElementById('uploadResultV2');
    const usedCapacityEl = document.getElementById('usedCapacityV2');
    const progressBarFill = document.getElementById('progressBarFillV2');
    const progressPercentage = document.getElementById('progressPercentageV2');
    const storageWarning = document.getElementById('storageWarningV2');
    const sortOrderSelect = document.getElementById('sortOrderV2');
    const typeFilterSelect = document.getElementById('typeFilterV2');
    const imageListDiv = document.getElementById('imageListV2');
    const dropZone = document.getElementById('fileDropZone');
    const dropOverlay = document.getElementById('dropOverlayV2');
    const selectedFileNameEl = document.getElementById('selectedFileName');
    const lightboxModal = document.getElementById('lightboxModalV2');
    const lightboxImg = document.getElementById('lightboxImgV2');
    const lightboxCaption = document.getElementById('lightboxCaptionV2');
    const lightboxCloseBtn = document.querySelector('#lightboxModalV2 .lightbox-close-btn');
    const lightboxBackdrop = document.querySelector('#lightboxModalV2 .lightbox-backdrop');

    let selectedFile = null;
    let allImages = [];
    const MAX_UPLOAD_SIZE_MB = 1; // Max size before compression
    const TOTAL_CAPACITY_BYTES = 50 * 1024 * 1024; // 50 MB

    // --- Initial Page Animations ---
     if (!prefersReducedMotion) {
         const tl = gsap.timeline({delay: 0.1});
         tl.from('[data-animate="header-slide-down"]', { duration: 0.8, y: -50, autoAlpha: 0, ease: 'power3.out' })
           .from('[data-animate="card-fade-in"]', { duration: 1.0, autoAlpha: 0, scale: 0.98, ease: 'power2.out' }, "-=0.5")
           .from('.storage-info-v2 > *', { duration: 0.6, autoAlpha: 0, y: 15, stagger: 0.1, ease: 'power1.out'}, "-=0.6")
           .from('.upload-area-v2 > *', { duration: 0.6, autoAlpha: 1, y: 15, stagger: 0.1, ease: 'power1.out'}, "-=0.4")
           .from('[data-animate="fade-up"]', { duration: 0.8, y: 40, autoAlpha: 0, ease: 'power3.out' }, "-=0.5");
     }


    // --- Helper Functions ---
    const formatBytes = (bytes, decimals = 2) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    // --- Image Compression (Revised for quality control) ---
    function compressImage(file, maxSizeMB = MAX_UPLOAD_SIZE_MB, quality = 0.7, callback) {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = event => {
            const img = new Image();
            img.src = event.target.result;
            img.onerror = () => { console.error("Image load error during compression"); callback(null); }; // Handle image load errors
            img.onload = () => {
                let canvas = document.createElement('canvas');
                let ctx = canvas.getContext('2d');
                let width = img.width;
                let height = img.height;
                const maxSizeBytes = maxSizeMB * 1024 * 1024;

                // Basic check if compression needed based on initial size (less accurate)
                if (file.size <= maxSizeBytes) {
                     console.log("Image size within limit, skipping compression.");
                     callback(file); // Return original file if small enough
                     return;
                }

                console.log("Compressing image...");

                // Simple downscaling if dimensions are huge (optional)
                const maxDim = 1920; // Max width/height
                if (width > maxDim || height > maxDim) {
                    if (width > height) {
                        height *= maxDim / width;
                        width = maxDim;
                    } else {
                        width *= maxDim / height;
                        height = maxDim;
                    }
                }

                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);

                // Convert to blob with specified quality
                canvas.toBlob(blob => {
                    if (blob && blob.size > maxSizeBytes) {
                        console.warn(`Image still too large after compression (${formatBytes(blob.size)}), consider server-side limit or lower quality.`);
                        // Optionally try again with lower quality, or just return the oversized blob
                    } else if (!blob) {
                         console.error("Canvas toBlob failed.");
                         callback(null); // Indicate failure
                         return;
                    }
                    callback(blob ? new File([blob], file.name.replace(/\.[^/.]+$/, "") + ".jpg", { type: 'image/jpeg', lastModified: Date.now() }) : null);
                }, 'image/jpeg', quality); // Use JPEG for compression
            }
        }
         reader.onerror = () => { console.error("FileReader error during compression"); callback(null); };
    }

    // --- UI Update Functions ---
    function updateStorageUI(imagesData = allImages) {
        let totalSize = imagesData.reduce((acc, img) => acc + (img.length || img.size || 0), 0);
        const usedCapacityMB = totalSize / (1024 * 1024);
        const fillPercentage = Math.min(100, (totalSize / TOTAL_CAPACITY_BYTES) * 100); // Cap at 100%

        usedCapacityEl.textContent = `${usedCapacityMB.toFixed(2)} MB`;

        // Animate progress bar fill
        gsap.to(progressBarFill, {
             width: `${fillPercentage}%`,
             duration: 1.0, // Smooth animation
             ease: 'power2.out'
         });
         // Animate percentage text
          gsap.to(progressPercentage, {
              textContent: `${fillPercentage.toFixed(0)}%`,
              duration: 1.0,
              ease: 'power2.out',
              snap: { textContent: 1 },
              roundProps: "textContent"
          });


        progressBarFill.classList.remove('warning', 'danger');
        storageWarning.style.display = 'none';
        uploadBtn.disabled = false; // Enable by default

        if (fillPercentage >= 100) {
            progressBarFill.classList.add('danger');
            storageWarning.textContent = "Dung lượng đã đầy! Không thể tải thêm.";
            storageWarning.style.display = 'block';
            uploadBtn.disabled = true;
        } else if (fillPercentage >= 90) {
            progressBarFill.classList.add('warning');
            storageWarning.textContent = "Cảnh báo: Dung lượng sắp đầy (> 90%).";
            storageWarning.style.display = 'block';
        }
    }

    function displayPreview(file) {
        if (!file) { // Handle case where compression failed
             previewArea.innerHTML = `<span class="preview-error">Lỗi xử lý ảnh xem trước.</span>`;
             dropZone.classList.remove('has-file');
             selectedFile = null;
             uploadBtn.disabled = true;
             return;
         }
        const reader = new FileReader();
        reader.onload = function(ev) {
            previewArea.innerHTML = `<img src="${ev.target.result}" alt="Xem trước: ${file.name}" class="preview-image">`;
            dropZone.classList.add('has-file'); // Add class when file is selected
            selectedFileNameEl.textContent = file.name;
            uploadBtn.disabled = false; // Enable upload button
             uploadResult.textContent = ''; // Clear previous result
             uploadBtn.classList.remove('success', 'fail'); // Reset button state
        };
         reader.onerror = () => { previewArea.innerHTML = `<span class="preview-error">Lỗi đọc file xem trước.</span>`; };
        reader.readAsDataURL(file);
    }

    function resetUploadArea() {
        previewArea.innerHTML = `<span class="preview-placeholder">Xem trước ảnh</span>`;
        imageInput.value = ''; // Clear file input
        selectedFile = null;
        uploadBtn.disabled = true;
        dropZone.classList.remove('has-file');
        selectedFileNameEl.textContent = 'Tên file';
         uploadBtn.classList.remove('success', 'fail', 'submitting');
         // Reset button progress fill if implemented
         gsap.set(".btn-upload-v2 .btn-progress-fill", { width: "0%" });
    }

    // --- Image Loading & Rendering ---
    async function loadImages() {
        imageListDiv.innerHTML = `<p class="loading-images-placeholder"><i class="fas fa-spinner fa-spin"></i> Đang tải danh sách ảnh...</p>`;
        try {
            const res = await fetch('/api/pro-images/list');
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            const data = await res.json();
            allImages = Array.isArray(data) ? data : [];
            applyFilters(); // Initial render and sort/filter
        } catch (err) {
            console.error("Fetch error:", err);
            imageListDiv.innerHTML = `<p class="loading-error">Lỗi tải danh sách ảnh. Vui lòng thử lại.</p>`;
            showAlert("Lỗi tải danh sách ảnh", "error", 5000);
            allImages = []; // Clear cache on error
             updateStorageUI(); // Update storage even on load error
        }
    }

    function applyFilters() {
        let filtered = allImages.slice(); // Create a copy
        const type = typeFilterSelect.value;
        const sortOrder = sortOrderSelect.value;

        // Filter by type
        if (type) {
            filtered = filtered.filter(img => img.filename && img.filename.toLowerCase().endsWith(type));
        }

        // Sort
        filtered.sort((a, b) => {
             const dateA = new Date(a.uploadDate);
             const dateB = new Date(b.uploadDate);
             return sortOrder === "asc" ? dateA - dateB : dateB - dateA;
         });

        renderImages(filtered);
        updateStorageUI(filtered); // Update storage based on *all* images, not just filtered ones
    }

    function renderImages(images) {
        imageListDiv.innerHTML = ""; // Clear previous
        if (images.length === 0) {
            imageListDiv.innerHTML = `<p class="no-images-found">Không có ảnh nào phù hợp.</p>`;
            updateStorageUI(); // Update storage even if no images displayed
            return;
        }

        images.forEach((img, index) => {
            const div = document.createElement('div');
            div.className = "image-card-v2"; // New class name
            div.style.setProperty('--stagger-index', index); // For potential future stagger on filter

             // Ensure URL is correctly formed - PRIORITIZE img.url if available
             const imageUrl = img.url ? `/api${img.url}` : (img.filename ? `/api/pro-images/${img.filename}` : '/img/placeholder.png');
             const fullImageUrl = `${window.location.origin}${imageUrl}`; // Full URL for copy

             // Limit display name length
             const displayName = img.displayName || img.filename || 'Không tên';
             const displayFilename = img.filename || 'Không tên';

            div.innerHTML = `
                <div class="img-v2-wrapper" data-src="${imageUrl}" data-alt="${displayName}">
                     <%# Use a placeholder initially, load actual image lazily or via Intersection Observer %>
                     <img src="/img/placeholder-image.svg" data-src="${imageUrl}" alt="${displayName}" class="lazy-image">
                     <div class="img-overlay-v2"></div>
                     <div class="img-loader"><i class="fas fa-spinner fa-spin"></i></div>
                 </div>
                 <div class="image-details-v2">
                     <h4 class="image-filename-v2" title="${displayFilename}">${displayFilename}</h4>
                     <div class="image-meta-v2">
                         <span class="image-size-v2">${formatBytes(img.length || img.size || 0)}</span> |
                         <span class="image-date-v2">${new Date(img.uploadDate || Date.now()).toLocaleDateString('vi-VN')}</span>
                     </div>
                     <div class="image-actions-v2">
                        <button class="action-btn copy-url-v2" data-url="${fullImageUrl}" title="Sao chép URL">
                           <i class="fas fa-copy"></i>
                         </button>
                        <button class="action-btn view-image-v2" title="Xem ảnh lớn">
                            <i class="fas fa-expand-alt"></i>
                         </button>
                         <button class="action-btn delete-image-v2" data-id="${img._id}" title="Xóa ảnh">
                             <i class="fas fa-trash-alt"></i>
                         </button>
                     </div>
                 </div>`;
            imageListDiv.appendChild(div);

             // Add event listeners for new buttons within the card
             const imgWrapper = div.querySelector('.img-v2-wrapper');
             const viewBtn = div.querySelector('.view-image-v2');
             const copyBtn = div.querySelector('.copy-url-v2');
             const deleteBtn = div.querySelector('.delete-image-v2');
             const lazyImage = div.querySelector('.lazy-image');

             // Image Loading Logic (Simple version)
             const actualImage = new Image();
             actualImage.onload = () => {
                 lazyImage.src = imageUrl;
                 lazyImage.classList.add('loaded');
                 div.querySelector('.img-loader')?.remove(); // Remove loader
             };
              actualImage.onerror = () => {
                 lazyImage.alt = "Lỗi tải ảnh";
                 lazyImage.src = "/img/error-image.svg"; // Placeholder for error
                 div.querySelector('.img-loader')?.remove();
             };
             actualImage.src = imageUrl; // Start loading actual image

             // Lightbox Trigger
             const triggerLightbox = () => openLightbox(imageUrl, displayName);
             imgWrapper.addEventListener('click', triggerLightbox);
             viewBtn.addEventListener('click', triggerLightbox);

             // Copy URL
             copyBtn.addEventListener('click', function() {
                 const urlToCopy = this.dataset.url;
                  navigator.clipboard.writeText(urlToCopy)
                      .then(() => showAlert("Đã sao chép URL!", "success", 2500))
                      .catch(() => showAlert("Lỗi sao chép URL.", "error", 3000));
              });

             // Delete Image
             deleteBtn.addEventListener('click', async function() {
                 const imageId = this.dataset.id;
                 // Use custom confirm
                 if (typeof showCustomConfirm === 'function') {
                     const confirmed = await showCustomConfirm("Xác nhận xóa ảnh này vĩnh viễn?");
                     if (confirmed) { deleteImageAction(imageId, div); }
                 } else { // Fallback
                     if (window.confirm("Xác nhận xóa ảnh này vĩnh viễn?")) {
                         deleteImageAction(imageId, div);
                     }
                 }
             });

        }); // End forEach

         // Re-apply entrance animation if needed (e.g., after filter/sort)
        // animateDashboardStagger('.image-card-v2', imageListDiv);

    } // End renderImages


    // --- Delete Action ---
    async function deleteImageAction(id, cardElement) {
         console.log(`Attempting to delete image with ID: ${id}`);
         // Optional: Add loading state to the specific card
         cardElement.style.opacity = '0.5';
         cardElement.style.pointerEvents = 'none';

         try {
             const res = await fetch(`/api/pro-images/${id}`, { method: 'DELETE' });
             const data = await res.json();
             if (!res.ok || data.error) {
                 throw new Error(data.error || `HTTP error! status: ${res.status}`);
             }
             showAlert("Xóa ảnh thành công!", "success", 3000);
             // Animate card removal
             gsap.to(cardElement, { duration: 0.4, autoAlpha: 0, scale: 0.9, x: -50, ease: 'power1.in', onComplete: () => {
                 cardElement.remove();
                 // Reload images to update list and storage info accurately
                 loadImages();
             }});
         } catch (err) {
             console.error("Delete error:", err);
             showAlert(`Lỗi xóa ảnh: ${err.message}`, "error", 5000);
             // Restore card appearance on error
             cardElement.style.opacity = '1';
             cardElement.style.pointerEvents = 'auto';
         }
    }


    // --- File Input & Drop Zone Handling ---
    imageInput.addEventListener('change', handleFileSelect);
    dropZone.addEventListener('dragenter', handleDragEnter);
    dropZone.addEventListener('dragover', handleDragOver);
    dropZone.addEventListener('dragleave', handleDragLeave);
    dropZone.addEventListener('drop', handleDrop);
    // Global listeners for overlay
    document.body.addEventListener('dragenter', showDropOverlay);
    dropOverlay.addEventListener('dragleave', hideDropOverlay); // Hide when leaving overlay itself
    dropOverlay.addEventListener('drop', handleDropOnOverlay); // Handle drop on overlay

    function handleFileSelect(e) {
        const files = e.target.files;
        if (files && files[0]) {
            processSelectedFile(files[0]);
        }
    }
    function processSelectedFile(file) {
         uploadResult.textContent = ''; // Clear previous results
         uploadBtn.classList.remove('success', 'fail', 'submitting');
        if (file.size > MAX_UPLOAD_SIZE_MB * 1024 * 1024) {
            showAlert(`Ảnh lớn hơn ${MAX_UPLOAD_SIZE_MB}MB, đang nén...`, 'info', 3000);
            compressImage(file, MAX_UPLOAD_SIZE_MB, 0.7, (compressedBlob) => { // Use quality 0.7
                 if (compressedBlob) {
                     selectedFile = compressedBlob; // Already a File object if compression worked
                     displayPreview(selectedFile);
                 } else {
                     showAlert('Không thể nén ảnh, vui lòng thử ảnh khác.', 'error', 4000);
                     resetUploadArea();
                 }
             });
        } else {
            selectedFile = file;
            displayPreview(selectedFile);
        }
    }
    function handleDragEnter(e) { e.preventDefault(); e.stopPropagation(); dropZone.classList.add('drag-over'); }
    function handleDragOver(e) { e.preventDefault(); e.stopPropagation(); /* Needed to allow drop */ }
    function handleDragLeave(e) { e.preventDefault(); e.stopPropagation(); dropZone.classList.remove('drag-over'); }
    function handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.remove('drag-over');
        const files = e.dataTransfer.files;
        if (files && files[0] && files[0].type.startsWith('image/')) {
            processSelectedFile(files[0]);
        } else {
            showAlert('Chỉ chấp nhận file ảnh.', 'warning', 3000);
        }
    }
    function showDropOverlay(e){ e.preventDefault(); dropOverlay.style.display = "flex"; }
    function hideDropOverlay(e){ e.preventDefault(); dropOverlay.style.display = "none"; }
    function handleDropOnOverlay(e){
        e.preventDefault();
        e.stopPropagation();
        hideDropOverlay(e); // Hide overlay first
        const files = e.dataTransfer.files;
        if (files && files[0] && files[0].type.startsWith('image/')) {
            processSelectedFile(files[0]);
        } else {
            showAlert('Chỉ chấp nhận file ảnh.', 'warning', 3000);
        }
    }

    // --- Clipboard Paste Handling ---
    document.addEventListener('paste', (e) => {
        // Check if the focus is not inside an input/textarea to avoid conflicts
        const activeEl = document.activeElement;
        if (activeEl && (activeEl.tagName === 'INPUT' || activeEl.tagName === 'TEXTAREA')) {
            return;
        }

        if (e.clipboardData && e.clipboardData.items) {
            const items = e.clipboardData.items;
            for (let i = 0; i < items.length; i++) {
                if (items[i].kind === 'file' && items[i].type.startsWith('image/')) {
                    const file = items[i].getAsFile();
                    if (file) {
                        showAlert('Đã nhận ảnh từ clipboard!', 'info', 2000);
                        processSelectedFile(file);
                        // Optionally scroll to upload area
                        dropZone?.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        break; // Process only the first image found
                    }
                }
            }
        }
    });


    // --- Upload Button Click ---
    uploadBtn.addEventListener('click', async () => {
        if (!selectedFile || uploadBtn.disabled || uploadBtn.classList.contains('submitting')) return;

        uploadResult.textContent = "Đang tải lên...";
        uploadBtn.classList.add('submitting');
        uploadBtn.disabled = true;
        gsap.to(".btn-upload-v2 .btn-progress-fill", { width: "0%", duration: 0 }); // Reset progress

        const formData = new FormData();
        formData.append('image', selectedFile, selectedFile.name); // Send processed file

        try {
             // Simulate progress (replace with actual progress if available)
             gsap.to(".btn-upload-v2 .btn-progress-fill", { width: "100%", duration: 1.5, ease: 'linear' });

            const res = await fetch('/api/pro-images/upload', { method: 'POST', body: formData });
            const data = await res.json();

             gsap.killTweensOf(".btn-upload-v2 .btn-progress-fill"); // Stop progress anim
             gsap.set(".btn-upload-v2 .btn-progress-fill", { width: "0%" }); // Hide progress fill

            if (!res.ok || data.error) {
                throw new Error(data.error || `HTTP error ${res.status}`);
            }

            showAlert("Tải lên thành công!", "success", 4000);
            uploadResult.textContent = `Thành công: ${data.fileId}`;
            uploadBtn.classList.remove('submitting');
            uploadBtn.classList.add('success');
            resetUploadArea(); // Clear after successful upload
            loadImages(); // Refresh list

        } catch (err) {
            console.error("Upload error:", err);
            showAlert(`Lỗi tải lên: ${err.message}`, "error", 5000);
            uploadResult.textContent = "Tải lên thất bại.";
             uploadBtn.classList.remove('submitting');
             uploadBtn.classList.add('fail');
             // Keep file selected on failure
             uploadBtn.disabled = false;
        } finally {
            // Remove success/fail state after a delay
            setTimeout(() => {
                 uploadBtn.classList.remove('success', 'fail');
                 uploadBtn.disabled = (selectedFile === null); // Disable only if no file selected
            }, 2500);
        }
    });

    // --- Filter/Sort Event Listeners ---
    sortOrderSelect.addEventListener('change', applyFilters);
    typeFilterSelect.addEventListener('change', applyFilters);

    // --- Lightbox Logic ---
    const openLightbox = (src, caption) => {
         if (!src || !lightboxModal || !lightboxImg || !lightboxCaption) return;
         lightboxImg.src = ''; // Clear previous image first
         lightboxImg.src = src; // Set new source
         lightboxCaption.textContent = caption || ''; // Set caption
         // Animate lightbox opening
         gsap.set(lightboxModal, { display: 'flex', autoAlpha: 0 });
         gsap.to(lightboxModal, { duration: 0.4, autoAlpha: 1, ease: 'power2.out' });
         gsap.from(lightboxImg, { duration: 0.5, scale: 0.9, delay: 0.1, ease: 'power2.out' });
         document.body.style.overflow = 'hidden'; // Prevent background scroll
    };

    const closeLightbox = () => {
         if (!lightboxModal) return;
         // Animate closing
         gsap.to(lightboxModal, {
             duration: 0.3,
             autoAlpha: 0,
             ease: 'power1.in',
             onComplete: () => {
                 lightboxModal.style.display = 'none'; // Hide after animation
                 document.body.style.overflow = ''; // Restore scroll
                 lightboxImg.src = ''; // Clear image source
             }
         });
    };

    lightboxCloseBtn?.addEventListener('click', closeLightbox);
    lightboxBackdrop?.addEventListener('click', closeLightbox); // Close on backdrop click
     // Optional: Close lightbox with Escape key
     document.addEventListener('keydown', (e) => {
         if (e.key === 'Escape' && lightboxModal && lightboxModal.style.display !== 'none') {
             closeLightbox();
         }
     });

    // --- Initial Load ---
    loadImages();

}); // End DOMContentLoaded
</script>