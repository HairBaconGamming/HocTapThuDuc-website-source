<%# ========================================================================= %>
<%# EJS Template for Lesson Details Display                                   %>
<%# ========================================================================= %>

<%# Determine mode - Although less relevant for detail page, might be useful for conditional logic if needed %>
<% const currentMode = typeof mode !== 'undefined' ? mode : (lesson ? 'view' : 'error'); %> <%# Default to 'view' if lesson exists %>

<%# Set the page title - Primarily uses lesson title %>
<% const pageTitle = lesson ? lesson.title : 'Chi tiết Bài học'; %>

<%# Include Header: Pass title, user data, and active page identifier %>
<%- include('partials/header', {
    title: pageTitle,
    user: typeof user !== 'undefined' ? user : null,
    activePage: 'subjects' // Or derive from subject/category if needed
}) %>

<%# Link necessary libraries in header or footer %>
<%# CSS for this specific page %>
<link rel="stylesheet" href="/styleLessonDetail.css">
<%# CSS for Prism.js if used %>
<!-- <link href="/path/to/prism-theme.css" rel="stylesheet" /> -->
<%# KaTeX CSS %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css">

<section class="lesson-detail-page-section">

    <!-- Background Elements -->
    <div class="lesson-detail-background">
        <div class="bg-shape lesson-shape-1"></div>
        <div class="bg-shape lesson-shape-2"></div>
        <div class="bg-lines-subtle"></div>
    </div>

    <div class="container lesson-detail-container">

        <%# Check if lesson data exists %>
        <% if (lesson) { %>

            <!-- Lesson Header -->
            <div class="lesson-detail-header" data-animate="header-fade-in">
                <%
                    let headerIconClass = 'fa-file-alt'; // Default for markdown or unknown
                    if (lesson.type === 'video') headerIconClass = 'fa-video';
                    else if (lesson.type === 'quiz') headerIconClass = 'fa-tasks';
                    else if (lesson.type === 'essay') headerIconClass = 'fa-pen-alt';
                %>
                <div class="lesson-type-icon"><i class="fas <%= headerIconClass %>"></i></div>
                <div class="lesson-title-area">
                    <h1><%= lesson.title %></h1>
                    <div class="lesson-meta-info">
                        <% if (lesson.subject?.name) { %>
                            <span>Môn học: <a href="/subjects/<%= lesson.subject._id %>" class="meta-link loading-link"><%= lesson.subject.name %></a></span> |
                        <% } else { %>
                             <span>Môn học: N/A</span> |
                        <% } %>
                        <% if (lesson.category) { %>
                            <span>Loại: <span class="meta-category"><%= lesson.category %></span></span> |
                        <% } %>
                        <% if (lesson.createdBy?.username) { %>
                            <span>Gửi bởi: <a href="/profile/<%= lesson.createdBy._id %>" class="author-link loading-link"><%= lesson.createdBy.username %></a></span>
                        <% } else { %>
                            <span>Gửi bởi: Admin</span>
                        <% } %>
                        <% if (lesson.type === 'markdown' && lesson.estimatedReadingTime > 0) { %>
                            | <span title="Thời gian đọc ước tính"><i class="far fa-clock"></i> <%= lesson.estimatedReadingTime %> phút</span>
                        <% } %>
                        <% if (lesson.isProOnly) { %>
                            | <span class="pro-badge inline-pro"><i class="fas fa-crown"></i> PRO</span>
                        <% } %>
                    </div>
                </div>
                 <%# Edit/Delete Buttons if owner %>
                 <% if (typeof user !== 'undefined' && user && lesson.createdBy && user._id.toString() === lesson.createdBy._id.toString()) { %>
                     <div class="lesson-owner-actions">
                         <a href="/lesson/<%= lesson._id %>/edit" class="btn btn-icon edit-btn" title="Chỉnh sửa bài học">
                             <i class="fas fa-edit"></i>
                         </a>
                         <form action="/lesson/<%= lesson._id %>/delete?_method=DELETE" method="POST" class="delete-form" onsubmit="return confirm('Bạn có chắc chắn muốn xóa bài học này không? Hành động này không thể hoàn tác.');">
                             <button type="submit" class="btn btn-icon delete-btn" title="Xóa bài học">
                                 <i class="fas fa-trash-alt"></i>
                             </button>
                         </form>
                     </div>
                 <% } %>
            </div>

            <!-- Content Area -->
            <div class="lesson-content-wrapper" data-animate="content-fade-up">

                <%# ==================== MARKDOWN ==================== %>
                <% if (lesson.type === 'markdown') { %>
                <article id="lessonContentV2" class="lesson-content-markdown prose-styling">
                    <% if (lesson.renderedContent && lesson.renderedContent.trim() !== "") { %>
                        <%- lesson.renderedContent %>
                    <% } else { %>
                        <p class="placeholder-text">Nội dung bài học này chưa được cập nhật.</p>
                    <% } %>
                </article>

                <%# ==================== VIDEO ==================== %>
                <% } else if (lesson.type === 'video') { %>
                <div class="lesson-content-video">
                    <% /* Video embedding logic as before */ %>
                    <%
                        let videoUrl = lesson.editorData?.video ?? lesson.content ?? '';
                        let embedUrl = null;
                        if (videoUrl) { try { /* ... URL parsing logic ... */
                             if (videoUrl.includes("youtube.com/watch?v=")) { const vId=new URL(videoUrl).searchParams.get("v"); if(vId) embedUrl = `https://www.youtube.com/embed/${vId}?rel=0`; }
                             else if (videoUrl.includes("youtu.be/")) { const vId=new URL(videoUrl).pathname.split('/')[1]?.split('?')[0]; if(vId) embedUrl = `https://www.youtube.com/embed/${vId}?rel=0`; }
                             else if (videoUrl.includes("vimeo.com/")) { const vId = new URL(videoUrl).pathname.match(/(\d+)/)?.[0]; if(vId) embedUrl = `https://player.vimeo.com/video/${vId}`; }
                             else if (videoUrl.match(/^https?:\/\/.+\.(mp4|webm|ogg)$/i)) { embedUrl = videoUrl; }
                         } catch (e) { embedUrl = null; } }
                    %>
                     <% if (embedUrl) { %>
                        <% if (embedUrl.match(/\.(mp4|webm|ogg)$/i)) { %>
                            <div class="video-embed-wrapper direct-video"><video controls preload="metadata" title="Lesson Video: <%= lesson.title %>"><source src="<%= embedUrl %>" type="video/<%= embedUrl.split('.').pop() %>">No video support.</video></div>
                        <% } else { %>
                            <div class="video-embed-wrapper"><iframe src="<%= embedUrl %>" frameborder="0" allowfullscreen title="Lesson Video: <%= lesson.title %>"></iframe></div>
                        <% } %>
                    <% } else { %> <p class="placeholder-text video-error">Video không khả dụng.</p> <% } %>
                </div>

                 <%# ==================== QUIZ ==================== %>
                 <% } else if (lesson.type === 'quiz') { %>
                    <% /* Parse quiz data safely */ %>
                    <% let quizDataParsed = []; try { if(lesson.editorData?.quiz){ if(typeof lesson.editorData.quiz === 'string'){ quizDataParsed = JSON.parse(lesson.editorData.quiz); } else { quizDataParsed = lesson.editorData.quiz; }} if(!Array.isArray(quizDataParsed)){ quizDataParsed = []; } } catch(e){ console.error("EJS Quiz Parse Error:", e); quizDataParsed = []; } %>

                    <% if (quizDataParsed.length > 0) { %>
                        <div class="lesson-content-quiz">

                            <!-- NEW: Mode Selector -->
                            <div class="quiz-mode-selector">
                                <button type="button" class="mode-tab-btn active" data-mode="review">
                                    <i class="fas fa-file-alt"></i> Ôn tập
                                </button>
                                <button type="button" class="mode-tab-btn" data-mode="study">
                                    <i class="fas fa-book-reader"></i> Học tập
                                </button>
                            </div>

                            <!-- REVIEW MODE PANEL -->
                            <div id="review-mode-container" class="quiz-mode-panel active">
                                <div class="quiz-controls-header">
                                    <div class="quiz-settings-v2">
                                        <div class="setting-item-v2"><input type="checkbox" id="toggleRandomQuestions" class="custom-checkbox visually-hidden"><label for="toggleRandomQuestions" class="custom-checkbox-label"><span class="custom-choice-indicator"></span> Xáo trộn câu hỏi</label></div>
                                        <div class="setting-item-v2"><input type="checkbox" id="toggleRandomChoices" class="custom-checkbox visually-hidden"><label for="toggleRandomChoices" class="custom-checkbox-label"><span class="custom-choice-indicator"></span> Xáo trộn đáp án</label></div>
                                    </div>
                                    <button type="button" id="resetQuizBtnV2" class="btn btn-secondary-outline reset-quiz-btn"><i class="fas fa-sync-alt"></i> Tải lại</button>
                                </div>
                                <div id="quizNavPanel" class="quiz-navigation-panel">
                                    <h4><i class="fas fa-list-ol"></i> Danh sách câu hỏi</h4>
                                    <div id="questionJumper" class="question-jumper-grid"></div>
                                </div>
                                <form id="quizFormV2" class="quiz-form-v2">
                                    <div id="quizContainerV2" class="quiz-questions-container">
                                        <!-- Review mode questions will be rendered here by JS -->
                                    </div>
                                    <div id="quizPagination" class="content-pagination"></div>
                                    <div class="quiz-submit-area"><button type="submit" class="btn btn-primary-glow submit-quiz-btn"><i class="fas fa-check-double"></i> Nộp bài</button></div>
                                </form>
                                <div id="quizResultV2" class="quiz-result-v2"></div>
                            </div>

                            <!-- STUDY MODE PANEL -->
                            <div id="study-mode-container" class="quiz-mode-panel">
                                <div class="study-stats-panel">
                                    <h4><i class="fas fa-chart-line"></i> Tiến trình học tập</h4>
                                    <div class="stat-box">
                                        <div id="study-progress-text" class="stat-value">0/0</div>
                                        <div class="stat-label">Đã học</div>
                                    </div>
                                    <div class="study-progress-bar">
                                        <div id="study-progress-fill" class="progress-fill"></div>
                                    </div>
                                    <div class="stat-box">
                                        <div id="study-correct-rate" class="stat-value">N/A</div>
                                        <div class="stat-label">Tỷ lệ đúng</div>
                                    </div>
                                     <div class="stat-box">
                                        <div id="study-highscore" class="stat-value">0%</div>
                                        <div class="stat-label">Điểm cao nhất</div>
                                    </div>
                                    <div>
                                        <h5 class="stat-label" style="text-align: left; margin-bottom: 8px;">Câu hỏi hay sai:</h5>
                                        <ul id="study-difficult-questions" class="difficult-questions-list">
                                            <li>Chưa có dữ liệu</li>
                                        </ul>
                                    </div>
                                    <button id="study-reset-progress" class="btn btn-danger" style="width: 100%; margin-top: 10px;"><i class="fas fa-trash-alt"></i> Xóa tiến trình</button>
                                </div>
                                <div class="study-main-area">
                                    <div id="study-question-display">
                                        <!-- Current study question will be rendered here -->
                                    </div>
                                    <div class="study-controls">
                                        <div class="study-nav-btns">
                                            <button id="study-prev-btn" class="study-nav-btn"><i class="fas fa-arrow-left"></i> Trước</button>
                                            <button id="study-next-btn" class="study-nav-btn">Sau <i class="fas fa-arrow-right"></i></button>
                                        </div>
                                        <div class="study-action-btns">
                                            <button id="study-check-btn" class="study-action-btn check-answer"><i class="fas fa-check"></i> Kiểm tra</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    <% } else { %> <p class="placeholder-text">Không có dữ liệu trắc nghiệm cho bài học này.</p> <% } %>

                <%# ==================== ESSAY ==================== %>
                <% } else if (lesson.type === 'essay') { %>
                 <div class="lesson-content-essay">
                      <% /* Essay prompt and form structure as before */ %>
                     <% if (lesson.editorData?.essayPrompt) { %> <div class="essay-prompt-card"> <h3 class="prompt-title"><i class="fas fa-pencil-ruler"></i> Đề bài</h3> <div class="prompt-content prose-styling"><% try { %><%- marked.parse(lesson.editorData.essayPrompt) %><% } catch(e) { %><%= lesson.editorData.essayPrompt %><% } %></div> </div> <% } %>
                     <% let essayDataParsed = []; try { if(lesson.editorData?.essay){ if(typeof lesson.editorData.essay === 'string'){ essayDataParsed = JSON.parse(lesson.editorData.essay); } else { essayDataParsed = lesson.editorData.essay; } } if(!Array.isArray(essayDataParsed)){ essayDataParsed = []; } } catch(e){ console.error("EJS Essay Parse Error:", e); essayDataParsed = []; } %>
                     <% if (essayDataParsed.length > 0) { %> <form id="essayFormV2" class="essay-form-v2"> <h3 class="essay-section-title">Bài làm của bạn</h3> <% essayDataParsed.forEach((q, idx) => { %> <% if (q && typeof q === 'object') { %> <div class="essay-question-group" data-question-index="<%= idx %>"> <div class="essay-question-content prose-styling"> <span class="question-number">Câu <%= idx + 1 %>:</span> <% try { %> <%- marked.parse(q.question || "(Câu hỏi trống)") %> <% } catch(e) { %> <%= q.question || "(Câu hỏi trống)" %> <% } %> </div> <div class="textarea-wrapper"> <textarea class="essay-answer-textarea form-input-v2" placeholder="Nhập câu trả lời..." rows="5" required name="answers[<%= idx %>]"></textarea> <span class="input-focus-line"></span> </div> </div> <% } %> <% }); %> <div class="essay-submit-area"> <button type="submit" class="btn btn-primary-glow submit-essay-btn" id="submitEssayBtnV2"><i class="fas fa-paper-plane"></i> Gửi bài chấm AI</button> <div id="gradingStatusV2" class="grading-status-v2"></div> </div> </form> <div id="essayResultV2" class="essay-result-v2"></div> <% } else { %> <p class="placeholder-text">Không có câu hỏi tự luận.</p> <% } %>
                 </div>

                <%# ================== TÀI LIỆU ================== %>
                <% } else if (lesson.type === 'document' && lesson.documentData) { %>
                    <% 
                        // Backend đã parse sẵn, chỉ cần gán biến
                        const docData = lesson.documentData; 
                    %>

                    <% if (docData && docData.url) { %>
                        <%
                            // URL xem trước công khai (cho Office) hoặc URL trực tiếp (cho PDF)
                            const previewUrl = docData.publicViewUrl || docData.url;
                            let previewHtml = '';
                            
                            // Logic để chọn trình xem trước
                            if (docData.contentType.includes('pdf')) {
                                // PDF có thể nhúng trực tiếp bằng <embed> hoặc <iframe> mà không cần token công khai
                                // vì trình duyệt của người dùng (đã đăng nhập) sẽ tải nó.
                                previewHtml = `<embed src="${docData.url}" type="application/pdf" width="100%" height="700px" />`;
                            
                            } else if (docData.contentType.includes('word') || docData.contentType.includes('excel') || docData.contentType.includes('presentation')) {
                                // Word, Excel, PowerPoint CẦN link công khai có token
                                if (docData.publicViewUrl) {
                                    const encodedUrl = encodeURIComponent(docData.publicViewUrl);
                                    previewHtml = `<iframe src='https://view.officeapps.live.com/op/embed.aspx?src=${encodedUrl}' width='100%' height='700px' frameborder='0'>This is an embedded <a target='_blank' href='https://office.com'>Microsoft Office</a> document, powered by <a target='_blank' href='https://office.com/webapps'>Office</a>.</iframe>`;
                                } else {
                                    // Fallback nếu không có publicViewUrl
                                    previewHtml = `<div class="document-preview-unsupported"><p>Không thể tạo link xem trước an toàn cho tài liệu này.</p></div>`;
                                }
                            }
                        %>

                        <div class="lesson-content-document">
                            <div class="document-header">
                                <div class="document-icon">
                                    <% if (docData.contentType.includes('pdf')) { %>
                                        <i class="fas fa-file-pdf"></i>
                                    <% } else if (docData.contentType.includes('word')) { %>
                                        <i class="fas fa-file-word"></i>
                                    <% } else if (docData.contentType.includes('excel') || docData.contentType.includes('spreadsheet')) { %>
                                        <i class="fas fa-file-excel"></i>
                                    <% } else if (docData.contentType.includes('presentation')) { %>
                                        <i class="fas fa-file-powerpoint"></i>
                                    <% } else { %>
                                        <i class="fas fa-file-alt"></i>
                                    <% } %>
                                </div>
                                <div class="document-info">
                                    <h3 class="document-filename"><%= docData.originalName %></h3>
                                    <p class="document-meta">
                                        Kích thước: <%= (docData.size / 1024 / 1024).toFixed(2) %> MB
                                    </p>
                                </div>
                                <a href="<%= docData.url %>" class="btn btn-secondary-outline download-btn" download>
                                    <i class="fas fa-download"></i> Tải về
                                </a>
                            </div>

                            <% if (previewHtml) { %>
                                <div class="document-preview-container">
                                    <%- previewHtml %>
                                </div>
                            <% } else { %>
                                <div class="document-preview-unsupported">
                                    <p>Không hỗ trợ xem trước cho loại file này.</p>
                                    <a href="<%= docData.url %>" class="btn btn-primary-glow" download>
                                        <i class="fas fa-download"></i> Tải tài liệu về máy
                                    </a>
                                </div>
                            <% } %>
                        </div>
                    <% } else { %>
                        <p class="placeholder-text text-danger">Lỗi: Không tìm thấy thông tin tài liệu đính kèm.</p>
                    <% } %>
                <% } %>
                
            </div> <!-- End .lesson-content-wrapper -->

            <!-- Action/Completion Bar -->
            <div class="lesson-action-bar" data-animate="action-bar-slide-up">
                 <% if (lesson.type === 'quiz' || lesson.type === 'essay') { %> <button type="button" class="btn btn-secondary-outline save-progress-btn" id="lessonProgressBtnV2"><i class="fas fa-save"></i> Lưu Tiến Trình</button> <% } else { %> <span></span> <% } %>
                <div class="completion-wrapper">
                     <% if (lesson.type === 'markdown' && lesson.estimatedReadingTime > 0) { %> <div id="countdownContainerV2" class="countdown-container" title="Thời gian đọc còn lại"> <svg class="countdown-svg" viewBox="0 0 36 36"><path class="countdown-bg-circle" d="M18 2.0845a15.9155 15.9155 0 0 1 0 31.831a15.9155 15.9155 0 0 1 0 -31.831"/><path class="countdown-progress-circle" id="countdownProgressCircle" stroke-dasharray="100, 100" d="M18 2.0845a15.9155 15.9155 0 0 1 0 31.831a15.9155 15.9155 0 0 1 0 -31.831"/></svg> <span id="countdownTextV2" class="countdown-text">--</span> </div> <% } %>
                     <button id="completeLessonBtnV2" class="btn btn-success-glow complete-lesson-btn" disabled><i class="fas fa-check-circle"></i> Hoàn Thành Bài Học</button>
                     <span id="scoreRequirementMsg" class="score-requirement-msg" style="display: none;">(Cần >= 80% để hoàn thành)</span>
                </div>
                 <% if (lesson.subject?._id) { %> <a href="/subjects/<%= lesson.subject._id %>" class="btn btn-secondary-outline back-link-v2 loading-link"><i class="fas fa-arrow-left"></i> Quay Lại Môn Học</a> <% } else { %> <span></span> <% } %>
            </div>

        <% } else { %> <%# Handle lesson not found %>
             <div class="lesson-detail-header"><h1>Lỗi Bài học</h1></div><div class="lesson-content-wrapper"><p class="placeholder-text video-error">Không thể tải thông tin bài học.</p><a href="/dashboard" class="btn btn-primary loading-link mt-3">Quay lại Dashboard</a></div>
        <% } %>

    </div> <!-- End .lesson-detail-container -->

     <!-- Lightbox for Markdown Images -->
     <div id="lessonLightboxModal" class="lightbox-modal-v2"> <div class="lightbox-backdrop"></div> <div class="lightbox-content-wrapper"> <img class="lightbox-image" id="lessonLightboxImg" src="" alt="Lightbox Image"> <button class="lightbox-close-btn" aria-label="Đóng">×</button> <div class="lightbox-info"> <span id="lessonLightboxCaption"></span> </div> </div> </div>

</section>
<%- include('partials/footer') %>

<!-- JS Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js" defer></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/contrib/auto-render.min.js" onload="console.log('KaTeX auto-render loaded for lesson detail.')"></script>
<!-- <script src="/js/prism.js" defer></script> -->
<script src="https://cdn.jsdelivr.net/npm/tsparticles@2.3.4/tsparticles.bundle.min.js"></script>

<!-- Your custom JS -->
<script src="/js/alerts.js" defer></script>
<script src="/js/confirm.js" defer></script>
<!-- Page Specific JS -->
<script>
// --- LESSON DETAIL PAGE SCRIPT V3 (with Study & Review Modes) ---
// --- LESSON DETAIL PAGE SCRIPT V3 (with Study & Review Modes) ---
document.addEventListener('DOMContentLoaded', () => {
    // --- Config & Refs ---
    if (typeof gsap === 'undefined') { console.error("GSAP not loaded!"); return; }
    if (typeof marked === 'undefined') { console.warn("Marked library not loaded! Markdown parsing might fail."); }
    gsap.registerPlugin(ScrollTrigger);
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const lessonType = "<%= lesson?.type ?? 'unknown' %>";
    const lessonId = "<%= lesson?._id ?? '' %>";
    const completeBtn = document.getElementById("completeLessonBtnV2");
    const scoreRequirementMsg = document.getElementById("scoreRequirementMsg");
    const PASSING_PERCENTAGE = 80;
    const contentWrapper = document.querySelector('.lesson-content-wrapper');

    // --- General Animations ---
    if (!prefersReducedMotion) { gsap.from('[data-animate="header-fade-in"]', { duration: 0.8, y: -40, autoAlpha: 0, ease: 'power3.out', delay: 0.2 }); gsap.from('.lesson-type-icon', { duration: 0.6, scale: 0, rotation: -90, ease: 'back.out(1.7)', delay: 0.4 }); gsap.from('.lesson-title-area > *', { duration: 0.7, x: -30, autoAlpha: 0, stagger: 0.1, ease: 'power2.out', delay: 0.5 }); gsap.from('[data-animate="content-fade-up"]', { duration: 1.0, y: 50, autoAlpha: 0, ease: 'power3.out', delay: 0.4 }); gsap.from('[data-animate="action-bar-slide-up"]', { duration: 0.8, y: 40, autoAlpha: 0, ease: 'power2.out', delay: 0.8 }); } else { gsap.set('[data-animate="header-fade-in"], [data-animate="content-fade-up"], [data-animate="action-bar-slide-up"]', {autoAlpha: 1}); }

    // --- Markdown Specific Processing ---
    if (lessonType === 'markdown' && contentWrapper) {
         const contentAreaMd = document.getElementById("lessonContentV2");
         if (contentAreaMd && typeof renderMathInElement === 'function') { try { renderMathInElement(contentAreaMd, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } catch (error) { console.error("KaTeX error:", error); } }
         const markdownImages = contentAreaMd ? contentAreaMd.querySelectorAll('img') : []; markdownImages.forEach(img => { img.style.cursor = 'pointer'; img.addEventListener('click', () => openLessonLightbox(img.src, img.alt || 'Hình ảnh')); });
         const estimatedTimeSeconds = <%= (lesson?.estimatedReadingTime ?? 0) * 60 %>; const countdownTextEl = document.getElementById("countdownTextV2"); const countdownProgressCircle = document.getElementById("countdownProgressCircle"); const countdownContainer = document.getElementById("countdownContainerV2");
         if (estimatedTimeSeconds > 0 && countdownTextEl && countdownProgressCircle && completeBtn && countdownContainer) { let remaining = estimatedTimeSeconds; countdownTextEl.textContent = remaining; gsap.set(countdownProgressCircle, { strokeDashoffset: 100 }); if (!prefersReducedMotion) { const interval = setInterval(() => { remaining--; countdownTextEl.textContent = remaining > 0 ? remaining : "✓"; const progress = Math.max(0, (remaining / estimatedTimeSeconds)); const dashoffset = progress * 100; gsap.to(countdownProgressCircle, { strokeDashoffset: dashoffset, duration: 1, ease: 'linear' }); if (remaining <= 0) { clearInterval(interval); completeBtn.disabled = false; gsap.to(completeBtn, { scale: 1.1, duration: 0.3, yoyo: true, repeat: 1, ease: 'back.out(3)' }); gsap.to(countdownContainer, { scale: 1.1, autoAlpha: 0.7, duration: 0.3, ease: 'power2.out'}); } }, 1000); completeBtn.disabled = true; } else { completeBtn.disabled = false; countdownContainer.style.display = 'none'; } } else if(completeBtn) { completeBtn.disabled = false; if(countdownContainer) countdownContainer.style.display = 'none'; }
    } else if (completeBtn) {
         completeBtn.disabled = false;
    }


    // --- QUIZ LOGIC (ALL MODES) ---
    if (lessonType === 'quiz' && contentWrapper) {
        let masterQuizData = [];
        try {
            const outerString = <%- JSON.stringify(lesson.editorData.quiz || '[]') %>;
            masterQuizData = JSON.parse(typeof JSON.parse(outerString) === 'string' ? JSON.parse(outerString) : outerString) || [];
            if (!Array.isArray(masterQuizData)) masterQuizData = [];
        } catch (e) {
            console.error("Error parsing master quiz data:", e);
            contentWrapper.innerHTML = '<p class="placeholder-text video-error">Lỗi tải dữ liệu trắc nghiệm.</p>';
            return;
        }

        const modeTabs = document.querySelectorAll('.mode-tab-btn');
        const studyPanel = document.getElementById('study-mode-container');
        const reviewPanel = document.getElementById('review-mode-container');
        let activeMode = 'review';
        let isAnimating = false;

        function switchMode(targetMode) {
            if (isAnimating || activeMode === targetMode) return;
            isAnimating = true;
            activeMode = targetMode;

            modeTabs.forEach(tab => tab.classList.toggle('active', tab.dataset.mode === targetMode));
            
            const panelToShow = targetMode === 'study' ? studyPanel : reviewPanel;
            const panelToHide = targetMode === 'study' ? reviewPanel : studyPanel;

            const tl = gsap.timeline({
                onComplete: () => {
                    isAnimating = false;
                    gsap.set(panelToHide, { display: 'none' });
                    if (targetMode === 'study') initStudyMode();
                    else initReviewMode();
                    updateCompletionButtonState();
                }
            });

            tl.to(panelToHide, { duration: 0.3, autoAlpha: 0, y: 15, ease: 'power2.in' });
            tl.set(panelToShow, { display: targetMode === 'study' ? 'grid' : 'block', y: 15, autoAlpha: 0 }, "-=0.2");
            tl.to(panelToShow, { duration: 0.4, autoAlpha: 1, y: 0, ease: 'power2.out' });
        }

        modeTabs.forEach(tab => tab.addEventListener('click', () => switchMode(tab.dataset.mode)));
        
        const shuffleArray = (array) => { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [array[i], array[j]] = [array[j], array[i]]; } return array; };
        
        const createQuestionCard = (q, originalIndex) => {
            const card = document.createElement('div');
            card.className = 'quiz-question-card';
            card.dataset.originalIndex = originalIndex;
            const correctCount = (q.options || []).filter(opt => opt.isCorrect).length;
            const inputType = correctCount > 1 ? 'checkbox' : 'radio';
            card.dataset.inputType = inputType;
            const optionsHtml = (q.options || []).map((option, oIdx) => {
                const optionId = `q${originalIndex}o${oIdx}_${Math.random()}`;
                return `<div class="quiz-option-v2" data-option-index="${oIdx}" data-is-correct="${option.isCorrect}"><input type="${inputType}" name="question-${originalIndex}-${inputType}" id="${optionId}" value="${oIdx}" class="visually-hidden quiz-input"><label for="${optionId}" class="option-label"><span class="option-indicator ${inputType}"></span><span class="option-text prose-styling">${marked.parseInline(option.text || "")}</span><span class="option-feedback-icon"></span></label></div>`;
            }).join('');
            card.innerHTML = `<div class="question-header"><div class="question-number">Câu ${originalIndex + 1}</div></div><div class="question-content-markdown prose-styling">${marked.parse(q.question || "")}</div><div class="quiz-options-list">${optionsHtml}</div><div class="question-feedback"></div>`;
            return card;
        };

        const updateCompletionButtonState = () => {
            let canComplete = false;
            let message = '';
            if (activeMode === 'review') {
                const resultDiv = document.getElementById('quizResultV2');
                const scoreText = resultDiv?.querySelector('.quiz-final-result p strong')?.textContent;
                if (scoreText) {
                    const [score, total] = scoreText.split('/').map(Number);
                    const percentage = total > 0 ? (score / total) * 100 : 0;
                    canComplete = percentage >= PASSING_PERCENTAGE;
                }
                message = `(Cần >= ${PASSING_PERCENTAGE}% để hoàn thành)`;
            } else if (activeMode === 'study') {
                const saved = localStorage.getItem(`studyProgress_${lessonId}`);
                if (saved) {
                    const state = JSON.parse(saved);
                    const masteredCount = Object.values(state.questions).filter(q => q.status === 'mastered').length;
                    canComplete = masteredCount >= masterQuizData.length;
                }
                message = `(Cần học thuộc ${masterQuizData.length}/${masterQuizData.length} câu)`;
            }
            if (completeBtn) completeBtn.disabled = !canComplete;
            if (scoreRequirementMsg) {
                scoreRequirementMsg.textContent = message;
                scoreRequirementMsg.style.display = completeBtn.disabled ? 'inline' : 'none';
            }
        };
// ===================================
        // ===== REVIEW MODE LOGIC (ENHANCED) =========
        // ===================================
        const initReviewMode = (() => {
            let initialized = false;
            return () => {
                if (initialized) return;
                initialized = true;

                const ITEMS_PER_PAGE = 5;
                const quizContainer = document.getElementById('quizContainerV2');
                const paginationContainer = document.getElementById('quizPagination');
                const quizForm = document.getElementById('quizFormV2');
                const resultDiv = document.getElementById('quizResultV2');
                const resetBtn = document.getElementById("resetQuizBtnV2");
                const randomQuestionsToggle = document.getElementById("toggleRandomQuestions");
                const randomChoicesToggle = document.getElementById("toggleRandomChoices");
                const navPanel = document.getElementById('questionJumper');
                
                let workingQuizData = [];
                let currentPage = 1;
                let quizSubmitted = false;
                let quizFeedback = {};
                let incorrectQuestionIndices = [];
                let isReviewingIncorrect = false;
                const PROGRESS_KEY = `reviewProgress_${lessonId}`;

                const saveQuizProgress = () => {
                    const answers = JSON.parse(localStorage.getItem(PROGRESS_KEY) || '{}');
                    quizContainer.querySelectorAll('.quiz-question-card').forEach(qElem => {
                        const originalIndex = qElem.dataset.originalIndex;
                        const inputType = qElem.dataset.inputType;
                        if (inputType === 'radio') {
                            const selected = qElem.querySelector('input:checked');
                            answers[originalIndex] = selected ? selected.value : null;
                        } else {
                            const selected = qElem.querySelectorAll('input:checked');
                            answers[originalIndex] = Array.from(selected).map(cb => cb.value);
                        }
                    });
                    localStorage.setItem(PROGRESS_KEY, JSON.stringify(answers));
                };

                const loadQuizProgress = () => {
                    const savedAnswers = JSON.parse(localStorage.getItem(PROGRESS_KEY) || '{}');
                    quizContainer.querySelectorAll('.quiz-question-card').forEach(qElem => {
                        const originalIndex = qElem.dataset.originalIndex;
                        if (savedAnswers[originalIndex] == null) return;
                        if (qElem.dataset.inputType === 'radio') {
                            const radio = qElem.querySelector(`input[value="${savedAnswers[originalIndex]}"]`);
                            if (radio) radio.checked = true;
                        } else {
                            (savedAnswers[originalIndex] || []).forEach(val => {
                                const checkbox = qElem.querySelector(`input[value="${val}"]`);
                                if (checkbox) checkbox.checked = true;
                            });
                        }
                    });
                };
                
                const renderCurrentPage = () => {
                    if (!quizContainer) return;
                    quizContainer.innerHTML = '';
                    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
                    const endIndex = startIndex + ITEMS_PER_PAGE;
                    workingQuizData.slice(startIndex, endIndex).forEach(q => {
                        const originalIndex = masterQuizData.findIndex(item => item.id === q.id);
                        const card = createQuestionCard(q, originalIndex);
                        quizContainer.appendChild(card);
                    });
                    attachOptionListeners();
                    loadQuizProgress();
                    renderNavigation();
                    if (quizSubmitted) applyQuizFeedback();
                    if(!prefersReducedMotion) gsap.from(quizContainer.children, { duration: 0.4, y: 20, opacity: 0, stagger: 0.08, ease: 'power2.out' });
                };
                
                const renderPagination = () => {
                     if (!paginationContainer) return;
                     const totalPages = Math.ceil(workingQuizData.length / ITEMS_PER_PAGE);
                     paginationContainer.innerHTML = '';
                     if (totalPages <= 1) return;
                     const prevBtn = document.createElement('button'); prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i>'; prevBtn.className = 'pagination-btn'; prevBtn.disabled = currentPage === 1;
                     prevBtn.onclick = () => { currentPage--; renderCurrentPage(); renderPagination(); };
                     paginationContainer.appendChild(prevBtn);
                     const pageInfo = document.createElement('span'); pageInfo.className = 'pagination-info'; pageInfo.textContent = `Trang ${currentPage} / ${totalPages}`;
                     paginationContainer.appendChild(pageInfo);
                     const nextBtn = document.createElement('button'); nextBtn.innerHTML = '<i class="fas fa-chevron-right"></i>'; nextBtn.className = 'pagination-btn'; nextBtn.disabled = currentPage === totalPages;
                     nextBtn.onclick = () => { currentPage++; renderCurrentPage(); renderPagination(); };
                     paginationContainer.appendChild(nextBtn);
                };
             
                const renderNavigation = () => {
                    if (!navPanel) return;
                    navPanel.innerHTML = '';
                    const savedAnswers = JSON.parse(localStorage.getItem(PROGRESS_KEY) || '{}');
                    workingQuizData.forEach((q, idx) => {
                        const btn = document.createElement('button');
                        btn.className = 'nav-jump-btn';
                        btn.type = 'button';
                        btn.textContent = idx + 1;
                        const originalIndex = masterQuizData.findIndex(item => item.id === q.id);
                        const pageOfThis = Math.floor(idx / ITEMS_PER_PAGE) + 1;
                        if (pageOfThis === currentPage) btn.classList.add('on-page');
                        const correctCountForQ = (q.options || []).filter(opt => opt.isCorrect).length;
                        const inputType = correctCountForQ > 1 ? 'checkbox' : 'radio';
                        let answered = (inputType === 'radio') ? (savedAnswers[originalIndex] != null) : (Array.isArray(savedAnswers[originalIndex]) && savedAnswers[originalIndex].length > 0);
                        if (answered) btn.classList.add('answered');
                        if (quizSubmitted && quizFeedback[originalIndex] != null) {
                            btn.classList.add(quizFeedback[originalIndex].isCorrect ? 'correct' : 'incorrect');
                        }
                        btn.onclick = () => { currentPage = pageOfThis; renderCurrentPage(); renderPagination(); };
                        navPanel.appendChild(btn);
                    });
                };
             
                const attachOptionListeners = () => {
                     quizContainer.querySelectorAll('.quiz-option-v2 .quiz-input').forEach(input => {
                         input.addEventListener('change', () => {
                             if (quizSubmitted) return;
                             saveQuizProgress();
                             renderNavigation();
                         });
                     });
                };

                const applyQuizFeedback = () => {
                     quizContainer.querySelectorAll('.quiz-question-card').forEach(card => {
                         const originalIndex = card.dataset.originalIndex;
                         const feedback = quizFeedback[originalIndex];
                         if (!feedback) return;
                         card.querySelectorAll('.quiz-option-v2').forEach(opt => {
                             const isCorrect = opt.dataset.isCorrect === 'true';
                             const isChecked = opt.querySelector('.quiz-input')?.checked;
                             opt.style.pointerEvents = 'none';
                             if (isCorrect) opt.classList.add('correct-answer-reveal');
                             if (isChecked) opt.classList.add(isCorrect ? 'correct' : 'incorrect');
                         });
                         if (!feedback.isCorrect && feedback.explanation) {
                             const feedbackDiv = card.querySelector('.question-feedback');
                             feedbackDiv.innerHTML = `<p class="feedback-explanation"><em>Giải thích:</em> ${marked.parseInline(feedback.explanation)}</p>`;
                             gsap.from(feedbackDiv, { autoAlpha: 0, y: 10, duration: 0.4 });
                         }
                     });
                };
                
                const resetQuiz = () => {
                    isReviewingIncorrect = false;
                    incorrectQuestionIndices = [];
                    localStorage.removeItem(PROGRESS_KEY);
                    resultDiv.innerHTML = '';
                    quizForm.classList.remove('submitted');
                    const submitBtn = quizForm.querySelector('.submit-quiz-btn');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-check-double"></i> Nộp bài';
                    workingQuizData = randomQuestionsToggle.checked ? shuffleArray(JSON.parse(JSON.stringify(masterQuizData))) : JSON.parse(JSON.stringify(masterQuizData));
                    workingQuizData.forEach(q => { if (randomChoicesToggle.checked) q.options = shuffleArray(q.options); });
                    currentPage = 1;
                    quizSubmitted = false;
                    quizFeedback = {};
                    renderCurrentPage();
                    renderPagination();
                    updateCompletionButtonState();
                };
                
                quizForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    if (quizSubmitted && !isReviewingIncorrect) return;
                    
                    const savedAnswers = JSON.parse(localStorage.getItem(PROGRESS_KEY) || '{}');
                    if (Object.keys(savedAnswers).length < workingQuizData.length) {
                        return showAlert('Vui lòng trả lời tất cả các câu hỏi.', 'warning');
                    }

                    quizSubmitted = true;
                    let correctCount = 0;
                    let currentIncorrectIndices = [];

                    workingQuizData.forEach(q => {
                        const originalIndex = masterQuizData.findIndex(item => item.id === q.id);
                        const correctIndices = q.options.map((opt, idx) => opt.isCorrect ? idx : null).filter(idx => idx !== null).sort();
                        let isCorrectOverall = false;
                        const inputType = q.options.filter(o => o.isCorrect).length > 1 ? 'checkbox' : 'radio';
                        if (inputType === 'radio') {
                             if (correctIndices.includes(parseInt(savedAnswers[originalIndex], 10))) isCorrectOverall = true;
                        } else {
                            const userAnswers = (savedAnswers[originalIndex] || []).map(Number).sort();
                            if (JSON.stringify(userAnswers) === JSON.stringify(correctIndices)) isCorrectOverall = true;
                        }

                        if(isCorrectOverall) correctCount++;
                        else currentIncorrectIndices.push(originalIndex);
                        
                        quizFeedback[originalIndex] = { isCorrect: isCorrectOverall, explanation: q.explanation };
                    });
                    
                    applyQuizFeedback();
                    renderNavigation();

                    const scorePercentage = (correctCount / workingQuizData.length) * 100;
                    
                    if(isReviewingIncorrect) {
                        resultDiv.innerHTML = `<div class="quiz-final-result ${scorePercentage === 100 ? 'perfect' : 'good'}">
                            <h4>Hoàn thành Ôn tập!</h4>
                            <p>Bạn đã trả lời đúng <strong>${correctCount}/${workingQuizData.length}</strong> câu hỏi đã làm sai trước đó.</p>
                            <div class="review-actions">
                                <button type="button" class="btn btn-secondary-outline results-reset-btn">Làm lại từ đầu</button>
                            </div>
                        </div>`;
                        resultDiv.querySelector('.results-reset-btn').onclick = resetQuiz;
                    } else {
                        incorrectQuestionIndices = currentIncorrectIndices;
                        const studyProgress = JSON.parse(localStorage.getItem(`studyProgress_${lessonId}`) || '{}');
                        studyProgress.highScore = Math.max(studyProgress.highScore || 0, scorePercentage);
                        localStorage.setItem(`studyProgress_${lessonId}`, JSON.stringify(studyProgress));

                        let incorrectListHtml = '';
                        if(incorrectQuestionIndices.length > 0) {
                            incorrectListHtml = `<div class="incorrect-questions-summary">
                                <h5>Câu hỏi cần xem lại:</h5>
                                <ul class="incorrect-questions-list">${incorrectQuestionIndices.map(idx => `<li data-idx="${idx}">Câu ${idx + 1} - ${masterQuizData[idx].question.substring(0, 30)}...</li>`).join('')}</ul>
                            </div>`;
                        }

                        resultDiv.innerHTML = `<div class="quiz-final-result ${scorePercentage >= PASSING_PERCENTAGE ? 'perfect' : 'bad'}">
                            <h4>Kết quả</h4>
                            <p>Đúng <strong>${correctCount}/${masterQuizData.length}</strong> câu (${scorePercentage.toFixed(0)}%).</p>
                            ${scorePercentage >= PASSING_PERCENTAGE ? '<span class="perfect-score-msg"><i class="fas fa-star"></i> Đạt yêu cầu!</span>' : `<span class="fail-score-msg"><i class="fas fa-times-circle"></i> Cần ${PASSING_PERCENTAGE}% để hoàn thành.</span>`}
                            ${incorrectListHtml}
                            <div class="review-actions">
                                <button type="button" class="btn btn-secondary-outline results-reset-btn">Làm lại từ đầu</button>
                                ${incorrectQuestionIndices.length > 0 ? '<button type="button" class="btn btn-review-incorrect">Ôn tập lại câu sai</button>' : ''}
                            </div>
                        </div>`;
                        
                        resultDiv.querySelector('.results-reset-btn').onclick = resetQuiz;
                        const reviewIncorrectBtn = resultDiv.querySelector('.btn-review-incorrect');
                        if (reviewIncorrectBtn) {
                            reviewIncorrectBtn.onclick = () => {
                                isReviewingIncorrect = true;
                                quizSubmitted = false;
                                quizFeedback = {};
                                localStorage.removeItem(PROGRESS_KEY); // Clear answers for the new session
                                resultDiv.innerHTML = '';
                                workingQuizData = masterQuizData.filter((_, idx) => incorrectQuestionIndices.includes(idx));
                                currentPage = 1;
                                const submitBtn = quizForm.querySelector('.submit-quiz-btn');
                                submitBtn.disabled = false;
                                submitBtn.innerHTML = '<i class="fas fa-check"></i> Hoàn thành Ôn tập';
                                renderCurrentPage();
                                renderPagination();
                            };
                        }
                        const incorrectLinks = resultDiv.querySelectorAll('.incorrect-questions-list li');
                        incorrectLinks.forEach(link => {
                            link.onclick = () => {
                                const qIdx = parseInt(link.dataset.idx, 10);
                                const targetPage = Math.floor(qIdx / ITEMS_PER_PAGE) + 1;
                                currentPage = targetPage;
                                renderCurrentPage();
                                renderPagination();
                                // Highlight the specific question
                                const cardToHighlight = quizContainer.querySelector(`[data-original-index="${qIdx}"]`);
                                if (cardToHighlight) {
                                    cardToHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                    gsap.fromTo(cardToHighlight, {boxShadow: "0 0 0px 0px rgba(255, 223, 186, 0)"}, {boxShadow: "0 0 15px 5px rgba(245, 158, 11, 0.6)", duration: 0.5, yoyo: true, repeat: 1});
                                }
                            };
                        });
                    }
                    
                    gsap.from(resultDiv.firstElementChild, { scale: 0.8, autoAlpha: 0, ease: 'back.out(1.7)' });
                    quizForm.querySelector('.submit-quiz-btn').disabled = true;
                    updateCompletionButtonState();
                });
                
                resetBtn.addEventListener("click", resetQuiz);
                randomQuestionsToggle.addEventListener("change", resetQuiz);
                randomChoicesToggle.addEventListener("change", resetQuiz);

                resetQuiz();
            };
        })();
        
        // ===================================
        // ===== STUDY MODE LOGIC ==========
        // ===================================
        const initStudyMode = (() => {
            let initialized = false;
            return () => {
                if (initialized) return;
                initialized = true;

                const PROGRESS_KEY = `studyProgress_${lessonId}`;
                const questionDisplay = document.getElementById('study-question-display');
                const prevBtn = document.getElementById('study-prev-btn');
                const nextBtn = document.getElementById('study-next-btn');
                const checkBtn = document.getElementById('study-check-btn');
                const resetProgressBtn = document.getElementById('study-reset-progress');
                const navPanel = document.getElementById('questionJumper');
                let studyState = { currentIndex: 0, questions: {}, highScore: 0, srsEnabled: true };

                // SRS Toggle
                const srsToggle = document.createElement('div');
                srsToggle.innerHTML = '<input type="checkbox" id="srs-toggle" checked> <label for="srs-toggle">Bật Spaced Repetition (SRS)</label>';
                srsToggle.style.marginBottom = '10px';
                document.getElementById('study-mode-container').insertBefore(srsToggle, document.getElementById('study-stats-panel'));
                const srsCheckbox = document.getElementById('srs-toggle');
                srsCheckbox.addEventListener('change', () => { studyState.srsEnabled = srsCheckbox.checked; saveStudyProgress(); });

                const loadStudyProgress = () => {
                    const saved = localStorage.getItem(PROGRESS_KEY);
                    if (saved) {
                        try { studyState = JSON.parse(saved); } catch (e) { /* corrupted, will reset */ }
                    }
                    if(studyState.currentIndex >= masterQuizData.length) studyState.currentIndex = 0;
                    masterQuizData.forEach((_, index) => {
                        if (!studyState.questions[index]) {
                            studyState.questions[index] = { status: 'unseen', wrong: 0, lastAnswer: null, interval: 1, nextReview: Date.now(), easeFactor: 2.5 };
                        }
                    });
                };

                const saveStudyProgress = () => localStorage.setItem(PROGRESS_KEY, JSON.stringify(studyState));
                
                const updateStats = () => {
                    const total = masterQuizData.length;
                    const masteredCount = Object.values(studyState.questions).filter(q => q.status === 'mastered').length;
                    document.getElementById('study-progress-text').textContent = `${masteredCount}/${total}`;
                    const progressPercent = total > 0 ? (masteredCount / total) * 100 : 0;
                    document.getElementById('study-progress-fill').style.width = `${progressPercent}%`;
                    document.getElementById('study-highscore').textContent = `${(studyState.highScore || 0).toFixed(0)}%`;
                    const difficultQuestions = Object.entries(studyState.questions).filter(([, data]) => data.wrong > 0).sort(([, a], [, b]) => b.wrong - a.wrong).slice(0, 5);
                    const listEl = document.getElementById('study-difficult-questions');
                    listEl.innerHTML = difficultQuestions.length > 0 ? difficultQuestions.map(([idx, data]) => `<li data-idx="${idx}">Câu ${parseInt(idx, 10) + 1} (sai ${data.wrong} lần)</li>`).join('') : '<li>Chưa có dữ liệu</li>';
                    updateCompletionButtonState();
                };
                
                const renderStudyQuestion = () => {
                    const qIndex = studyState.currentIndex;
                    const qData = masterQuizData[qIndex];
                    const card = createQuestionCard(qData, qIndex);
                    card.classList.add('study-mode-card');
                    questionDisplay.innerHTML = '';
                    questionDisplay.appendChild(card);
                    
                    const qState = studyState.questions[qIndex];
                    if(qState?.lastAnswer != null) {
                         if (card.dataset.inputType === 'radio') { const radio = card.querySelector(`input[value="${qState.lastAnswer}"]`); if (radio) radio.checked = true; } 
                         else { (qState.lastAnswer || []).forEach(val => { const checkbox = card.querySelector(`input[value="${val}"]`); if (checkbox) checkbox.checked = true; }); }
                    }
                    
                    prevBtn.disabled = qIndex === 0;
                    nextBtn.disabled = qIndex === masterQuizData.length - 1;
                    checkBtn.disabled = false;
                    checkBtn.style.display = 'inline-flex';
                    renderStudyNavigation();
                };
                
                 const renderStudyNavigation = () => {
                    if (!navPanel) return;
                    navPanel.innerHTML = '';
                    masterQuizData.forEach((_, idx) => {
                        const btn = document.createElement('button');
                        btn.className = 'nav-jump-btn';
                        btn.type = 'button';
                        btn.textContent = idx + 1;
                        const qState = studyState.questions[idx];
                        if (qState) btn.classList.add(`status-${qState.status}`);
                        if (idx === studyState.currentIndex) btn.classList.add('on-page');
                        btn.onclick = () => { studyState.currentIndex = idx; renderStudyQuestion(); };
                        navPanel.appendChild(btn);
                    });
                };

                const findNextQuestion = (direction) => {
                    let nextIndex = studyState.currentIndex;
                    const total = masterQuizData.length;
                    const priorityIndices = [...Array(total).keys()].filter(i => studyState.questions[i]?.status !== 'mastered');
                    if (priorityIndices.length > 0) {
                        let currentInPriority = priorityIndices.indexOf(nextIndex);
                        if (direction > 0) {
                            nextIndex = (currentInPriority !== -1 && currentInPriority < priorityIndices.length - 1) ? priorityIndices[currentInPriority + 1] : priorityIndices[0];
                        } else {
                             nextIndex = (currentInPriority > 0) ? priorityIndices[currentInPriority - 1] : priorityIndices[priorityIndices.length - 1];
                        }
                    } else {
                        nextIndex = (nextIndex + direction + total) % total;
                    }
                    studyState.currentIndex = nextIndex;
                    renderStudyQuestion();
                };

                const checkStudyAnswer = () => {
                    const qIndex = studyState.currentIndex;
                    const qData = masterQuizData[qIndex];
                    const card = questionDisplay.querySelector('.quiz-question-card');
                    if (!card) return;
                    const qState = studyState.questions[qIndex];
                    
                    const correctIndices = qData.options.map((opt, idx) => opt.isCorrect ? idx : null).filter(idx => idx !== null).sort();
                    let isCorrectOverall = false;
                    
                    if (card.dataset.inputType === 'radio') {
                        const selected = card.querySelector('input:checked');
                        const userAnswer = selected ? parseInt(selected.value, 10) : null;
                        qState.lastAnswer = userAnswer;
                        if (correctIndices.includes(userAnswer)) isCorrectOverall = true;
                    } else {
                        const selected = card.querySelectorAll('input:checked');
                        const userAnswers = Array.from(selected).map(cb => parseInt(cb.value, 10)).sort();
                        qState.lastAnswer = userAnswers;
                        if (JSON.stringify(userAnswers) === JSON.stringify(correctIndices)) isCorrectOverall = true;
                    }
                    
                    qState.attempts = (qState.attempts || 0) + 1;
                    if (isCorrectOverall) {
                        qState.status = 'mastered';
                        card.classList.add('correct-answer-pop');
                        // Trigger confetti
                        if (typeof tsParticles !== 'undefined') {
                            tsParticles.load('tsparticles', {
                                particles: {
                                    number: { value: 50 },
                                    color: { value: '#00ff00' },
                                    shape: { type: 'circle' },
                                    opacity: { value: 0.5 },
                                    size: { value: 5 },
                                    move: { enable: true, speed: 3, direction: 'none', random: true, straight: false, outModes: 'out' }
                                },
                                interactivity: { events: { onHover: { enable: false } } },
                                detectRetina: true
                            });
                            setTimeout(() => tsParticles.domItem(0).destroy(), 2000);
                        }
                    } else {
                        qState.status = 'learning';
                        qState.wrong = (qState.wrong || 0) + 1;
                        card.classList.add('incorrect-answer-shake');
                    }

                    // SRS Logic
                    if (studyState.srsEnabled) {
                        const now = Date.now();
                        if (isCorrectOverall) {
                            qState.easeFactor = Math.max(1.3, qState.easeFactor * 1.3);
                            qState.interval = Math.max(1, qState.interval * qState.easeFactor);
                            qState.nextReview = now + (qState.interval * 24 * 60 * 60 * 1000);
                        } else {
                            qState.easeFactor = Math.max(1.3, qState.easeFactor * 0.7);
                            qState.interval = 1;
                            qState.nextReview = now + (1 * 24 * 60 * 60 * 1000);
                        }
                    }
                        
                card.querySelectorAll('.quiz-option-v2').forEach(opt => {
                    opt.style.pointerEvents = 'none';
                    if (opt.dataset.isCorrect === 'true') opt.classList.add('study-reveal-correct');
                    if (opt.querySelector('.quiz-input')?.checked) {
                        opt.classList.add(opt.dataset.isCorrect === 'true' ? 'study-correct' : 'study-incorrect');
                    }
                });
                
                checkBtn.style.display = 'none';
                updateStats();
                saveStudyProgress();
                renderStudyNavigation();
                findNextQuestion(1);
                };

                prevBtn.addEventListener('click', () => findNextQuestion(-1));
                nextBtn.addEventListener('click', () => findNextQuestion(1));
                checkBtn.addEventListener('click', checkStudyAnswer);
                resetProgressBtn.addEventListener('click', () => {
                    if (confirm('Bạn có chắc muốn xóa tiến trình học tập?')) {
                        localStorage.removeItem(PROGRESS_KEY);
                        studyState = { currentIndex: 0, questions: {}, highScore: studyState.highScore }; // Keep high score
                        masterQuizData.forEach((_, index) => { studyState.questions[index] = { status: 'unseen', wrong: 0, lastAnswer: null }; });
                        renderStudyQuestion();
                        updateStats();
                        saveStudyProgress();
                    }
                });
                document.getElementById('study-difficult-questions').addEventListener('click', (e) => {
                     if(e.target.tagName === 'LI' && e.target.dataset.idx) {
                         studyState.currentIndex = parseInt(e.target.dataset.idx, 10);
                         renderStudyQuestion();
                     }
                });
                
                loadStudyProgress();
                renderStudyQuestion();
                updateStats();
            };
        })();

        // *** Initial Setup ***
        gsap.set(reviewPanel, { display: 'block', autoAlpha: 1 });
        gsap.set(studyPanel, { display: 'none' });
        initReviewMode();
        updateCompletionButtonState();
    }
    
    // --- Essay Specific Processing ---
    if (lessonType === 'essay' && contentWrapper) {
        const essayForm = document.getElementById('essayFormV2');
        const submitBtnEssay = document.getElementById('submitEssayBtnV2');
        const gradingStatusEl = document.getElementById('gradingStatusV2');
        const essayResultDiv = document.getElementById('essayResultV2');
        const essayAnswerTextareas = document.querySelectorAll('.essay-answer-textarea');

        // Load/Save Essay Progress
        function loadEssayProgress() {
          const savedEssay = localStorage.getItem('essayProgress_' + lessonId);
          if (savedEssay) { try { const essayAnswers = JSON.parse(savedEssay); document.querySelectorAll('.essay-question-group').forEach((qElem, idx) => { const textarea = qElem.querySelector('.essay-answer-textarea'); if (textarea && essayAnswers[idx]) { textarea.value = essayAnswers[idx]; const wrapper = textarea.closest('.textarea-wrapper'); if(wrapper) wrapper.classList.add('filled'); } }); console.log("Essay progress loaded."); } catch (e) { console.error("Error loading essay progress:", e); } }
       }
       function saveEssayProgress() {
          const essayAnswers = []; document.querySelectorAll('.essay-question-group').forEach(qElem => { const textarea = qElem.querySelector('.essay-answer-textarea'); essayAnswers.push(textarea ? textarea.value : ''); }); try { localStorage.setItem('essayProgress_' + lessonId, JSON.stringify(essayAnswers)); /* console.log("Essay progress saved."); */ } catch(e) { console.error("Error saving essay progress", e); }
       }

        loadEssayProgress(); // Load on page start
        essayAnswerTextareas.forEach(textarea => {
             textarea.addEventListener('input', saveEssayProgress); // Save on input
             // Label animation logic
             const wrapper = textarea.closest('.textarea-wrapper');
             const label = wrapper?.querySelector('label'); // Assuming label exists
             if (!wrapper) return;
             const checkFilled = () => { if (textarea.value.trim() !== "") wrapper.classList.add('filled'); else wrapper.classList.remove('filled'); };
             textarea.addEventListener('focus', () => wrapper.classList.add('focused'));
             textarea.addEventListener('blur', () => { wrapper.classList.remove('focused'); checkFilled(); });
             checkFilled(); // Initial check
        });


        // Essay Submission
        essayForm?.addEventListener('submit', async function(e){
            e.preventDefault();
            if(submitBtnEssay?.classList.contains('submitting')) return;

            const essayQuestions = document.querySelectorAll('.essay-question-group');
            const answers = [];
            let allFilled = true;
            essayQuestions.forEach(qElem => {
                const textarea = qElem.querySelector('.essay-answer-textarea');
                const answer = textarea ? textarea.value.trim() : '';
                if(!answer) {
                     allFilled = false;
                     textarea?.classList.add('invalid'); // Highlight empty textareas
                } else {
                     textarea?.classList.remove('invalid');
                }
                answers.push(answer);
            });

             if(!allFilled){
                 showAlert("Vui lòng trả lời tất cả các câu hỏi tự luận.", "warning");
                 return;
             }

            if(gradingStatusEl) gradingStatusEl.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Đang chấm bài bằng AI...`;
            if(submitBtnEssay) { submitBtnEssay.disabled = true; submitBtnEssay.classList.add('submitting'); }
            if(essayResultDiv) essayResultDiv.innerHTML = ''; // Clear previous results

            try {
                const response = await fetch(`/essay/grade/${lessonId}`, { // Ensure API endpoint is correct
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ answers })
                });
                const result = await response.json();

                if(gradingStatusEl) gsap.to(gradingStatusEl, {autoAlpha: 0, duration: 0.3 }); // Fade out status

                if(!response.ok || result.error) { throw new Error(result.error || `HTTP error ${response.status}`); }

                // Display Essay Results
                 if(essayResultDiv) {
                     essayResultDiv.innerHTML = `<h4><i class="fas fa-poll"></i> Kết quả chấm bài:</h4>`;
                     const avgScoreEl = document.createElement('p');
                     avgScoreEl.className = 'average-score';
                     const averageScore = Math.round(result.averageScore || 0);
                     avgScoreEl.innerHTML = `Điểm trung bình: <span class="score-value" data-score="${averageScore}">0</span> / 100`;
                     essayResultDiv.appendChild(avgScoreEl);

                     const avgScoreValue = avgScoreEl.querySelector('.score-value');
                     if(avgScoreValue && !prefersReducedMotion){
                         gsap.to(avgScoreValue, { textContent: averageScore, duration: 1.5, ease: 'power1.out', snap: {textContent: 1}, roundProps: 'textContent'});
                     } else if (avgScoreValue) {
                         avgScoreValue.textContent = averageScore;
                     }

                     const detailsContainer = document.createElement('div');
                     detailsContainer.className = 'essay-score-details';
                     essayResultDiv.appendChild(detailsContainer);

                     // --- CORE FIX: Access comments and diffs using index from the main result object ---
                     const scoresArray = result.scores || [];
                     const commentsArray = result.comments || []; // Get comments array
                     const diffsArray = result.diffs || [];       // Get diffs array

                     scoresArray.forEach((scoreValue, idx) => { // Iterate through scores
                         const detailEl = document.createElement('div');
                         detailEl.className = 'score-detail-item';
                         const score = Math.round(scoreValue || 0); // Get score for this index
                         const comment = commentsArray[idx] || ""; // Get comment for this index
                         const diffHtml = diffsArray[idx] || "";    // Get diff HTML for this index

                         let scoreColorClass = score >= 80 ? 'high' : score >= 50 ? 'medium' : 'low';

                         detailEl.innerHTML = `
                              <div class="score-header"><strong>Câu ${idx + 1}:</strong> <span class="score-badge ${scoreColorClass}">${score} / 100</span></div>
                              ${comment ? `<p class="essay-comment"><i class="fas fa-comment-dots"></i> <strong>Nhận xét:</strong> ${comment}</p>` : ''}
                              ${diffHtml ? `<div class="diff-display-v2"><p><strong>Gợi ý sửa lỗi:</strong></p>${diffHtml}</div>` : ''}
                         `;
                         detailsContainer.appendChild(detailEl);
                     });
                     // --- END CORE FIX ---

                     if(!prefersReducedMotion){
                         gsap.from(detailsContainer.children, {duration: 0.5, autoAlpha: 0, y: 15, stagger: 0.1, ease:'power2.out', delay: 0.5});
                     }

                     // Enable/Disable Complete Button
                     if (averageScore >= PASSING_PERCENTAGE) {
                        if(completeBtn) completeBtn.disabled = false;
                        if(scoreRequirementMsg) scoreRequirementMsg.style.display = 'none';
                        if(!prefersReducedMotion && completeBtn) gsap.to(completeBtn, { scale: 1.1, duration: 0.3, yoyo: true, repeat: 1, ease: 'back.out(3)' });
                        const passMsg = document.createElement('p'); passMsg.className = 'perfect-score-msg'; passMsg.innerHTML = `<i class="fas fa-star"></i> Đạt yêu cầu hoàn thành!`; essayResultDiv.appendChild(passMsg);
                     } else {
                         if(completeBtn) completeBtn.disabled = true;
                         if(scoreRequirementMsg) scoreRequirementMsg.style.display = 'inline';
                         const failMsg = document.createElement('p'); failMsg.className = 'fail-score-msg'; failMsg.innerHTML = `<i class="fas fa-times-circle"></i> Chưa đạt yêu cầu (${PASSING_PERCENTAGE}%).`; essayResultDiv.appendChild(failMsg);
                     }
                      // Add reset button
                      const essayResetBtn = document.createElement('button');
                      essayResetBtn.type = 'button';
                      essayResetBtn.className = 'btn btn-secondary-outline results-reset-btn'; // Reuse quiz reset style
                      essayResetBtn.innerHTML = '<i class="fas fa-redo"></i> Làm lại bài tự luận';
                      essayResetBtn.addEventListener('click', () => {
                           if (window.confirm('Bạn muốn xóa bài làm hiện tại và làm lại?')) {
                               essayAnswerTextareas.forEach(ta => ta.value = ''); // Clear textareas
                               saveEssayProgress(); // Save cleared state
                               if(essayResultDiv) essayResultDiv.innerHTML = ''; // Clear results
                               if(gradingStatusEl) gradingStatusEl.innerHTML = ''; // Clear status
                               if(completeBtn) completeBtn.disabled = true; // Disable complete btn
                               if(scoreRequirementMsg) scoreRequirementMsg.style.display = 'none'; // Hide score message
                                essayAnswerTextareas[0]?.focus(); // Focus first textarea
                           }
                      });
                       essayResultDiv.appendChild(essayResetBtn); // Add button to results
                 }

            } catch(err) {
                console.error("Essay grading error:", err);
                if(gradingStatusEl) gradingStatusEl.textContent = "Lỗi khi chấm bài.";
                 showAlert(`Đã có lỗi xảy ra: ${err.message || 'Không thể chấm bài.'}`, "error", 5000);
            } finally {
                 if(submitBtnEssay) { submitBtnEssay.disabled = false; submitBtnEssay.classList.remove('submitting'); }
            }
        });
    }


    // --- Progress Saving Button ---
    const saveBtn = document.getElementById('lessonProgressBtnV2');
    saveBtn?.addEventListener('click', function () {
        let saved = false;
        if (lessonType === 'essay') { /* saveEssayProgress(); */ saved = true; }
        if (lessonType === 'quiz') { /* saveQuizProgress() or saveStudyProgress(); */ saved = true; } // Logic already saves on change

        if (saved && typeof showAlert === 'function') {
            gsap.timeline().to(saveBtn, { scale: 0.95, duration: 0.15, ease: 'power1.in' }).to(saveBtn, { scale: 1, duration: 0.4, ease: 'elastic.out(1, 0.5)' });
            showAlert("Tiến trình đã được lưu cục bộ.", "info", 2500);
        } else if(typeof showAlert === 'function') {
            showAlert("Không có tiến trình để lưu cho loại bài học này.", "info", 2500);
        }
    });

    // --- Lesson Completion ---
    completeBtn?.addEventListener("click", async function() {
        if(this.disabled) return;
        const confirmed = await (typeof customConfirm === 'function' ? customConfirm("Bạn chắc chắn đã hoàn thành bài học này?") : window.confirm("Bạn chắc chắn đã hoàn thành bài học này?"));
        if (confirmed) {
            this.disabled = true; this.classList.add('submitting');
            try {
                const res = await fetch(`/lesson/${lessonId}/complete`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                const data = await res.json();
                this.classList.remove('submitting');
                if (data.success) {
                    if(typeof showArtisticCompletionNotification === 'function') showArtisticCompletionNotification(data);
                    this.textContent = "Đã Hoàn Thành"; this.disabled = true;
                    localStorage.removeItem(`reviewProgress_${lessonId}`);
                    localStorage.removeItem(`studyProgress_${lessonId}`);
                    localStorage.removeItem(`essayProgress_${lessonId}`);
                } else {
                    if(typeof showAlert === 'function') showAlert("Lỗi: " + (data.error || 'Unknown error'), "error");
                    this.disabled = false;
                }
            } catch (err) {
                if(typeof showAlert === 'function') showAlert("Lỗi kết nối.", "error");
                this.classList.remove('submitting'); this.disabled = false;
            }
        }
    });
    
    // --- Lightbox and Loading Link Scripts (Unchanged) ---
    const lightboxModal = document.getElementById('lessonLightboxModal'); const lightboxImg = document.getElementById('lessonLightboxImg'); const lightboxCaption = document.getElementById('lessonLightboxCaption'); const lightboxCloseBtn = document.querySelector('#lessonLightboxModal .lightbox-close-btn'); const lightboxBackdrop = document.querySelector('#lessonLightboxModal .lightbox-backdrop');
    function openLessonLightbox(src, caption) { if (!src || !lightboxModal || !lightboxImg || !lightboxCaption) return; lightboxImg.src = ''; lightboxImg.src = src; lightboxCaption.textContent = caption || ''; gsap.set(lightboxModal, { display: 'flex', autoAlpha: 0 }); gsap.to(lightboxModal, { duration: 0.4, autoAlpha: 1, ease: 'power2.out' }); gsap.from(lightboxImg, { duration: 0.5, scale: 0.9, delay: 0.1, ease: 'power2.out' }); document.body.style.overflow = 'hidden'; }
    function closeLessonLightbox() { if (!lightboxModal || !(lightboxImg instanceof HTMLImageElement)) return; gsap.to(lightboxModal, { duration: 0.3, autoAlpha: 0, ease: 'power1.in', onComplete: () => { lightboxModal.style.display = 'none'; document.body.style.overflow = ''; lightboxImg.src = ''; } }); }
    lightboxCloseBtn?.addEventListener('click', closeLessonLightbox); lightboxBackdrop?.addEventListener('click', closeLessonLightbox); document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && lightboxModal && lightboxModal.style.display !== 'none') closeLessonLightbox(); });
    document.querySelectorAll(".loading-link").forEach(anchor => { anchor.addEventListener("click", function (event) { if (this.hash && this.pathname === window.location.pathname) { return; } const overlay = document.getElementById('loading-overlay'); if (overlay) { overlay.style.opacity = '0'; overlay.classList.add('active'); gsap.to(overlay, { opacity: 1, duration: 0.3 }); } }); });
});
</script>
