<!-- views/liveList.ejs -->
<%- include('partials/header', { title: 'Live Streams Đang Diễn Ra', user: user, activePage: 'live' }) %>

<link rel="stylesheet" href="/styleLiveList.css"> 

<section class="live-list-page-section"> <%# Unique class %>

    <!-- Optional Background Elements -->
    <div class="live-list-background">
        <div class="bg-pulse pulse-1"></div>
        <div class="bg-pulse pulse-2"></div>
        <div class="bg-grid-overlay"></div>
    </div>

    <div class="container live-list-container">
        <!-- Page Header -->
        <div class="live-list-header" data-animate="header-fade-in">
             <h2 class="main-title">
                 <i class="fas fa-tower-broadcast title-icon"></i> Live Streams Đang Diễn Ra
             </h2>
             <p class="page-subtitle">Tham gia các buổi học trực tiếp và tương tác cùng mọi người.</p>
              <div class="status-indicator">
                 <span class="dot"></span> Đang cập nhật...
              </div>
        </div>

        <!-- Live Stream Grid/List -->
        <div class="live-stream-grid" id="liveListContainer"> <%# Changed ID container %>
            <%# Placeholder for Loading State - JS will replace this %>
            <div class="loading-placeholder-grid">
                <div class="placeholder-card shimmer"></div>
                <div class="placeholder-card shimmer" style="--delay: 0.1s;"></div>
                <div class="placeholder-card shimmer" style="--delay: 0.2s;"></div>
                 <div class="placeholder-card shimmer" style="--delay: 0.3s;"></div>
            </div>
             <ul id="liveList" style="display: none;"> <%# Keep ul for JS, hide initially %>
                 <%# Content generated by JS %>
             </ul>
             <div class="no-streams-message" id="noStreamsMessage" style="display: none;">
                <i class="fas fa-video-slash"></i>
                <p>Hiện tại không có live stream nào.</p>
                <% if(user) { %>
                 <a href="/live/create" class="btn btn-primary-glow loading-link"> <i class="fas fa-plus"></i> Tạo Live Stream Mới</a>
                <% } %>
             </div>
             <div class="error-message" id="errorMessage" style="display: none;">
                  <i class="fas fa-exclamation-triangle"></i>
                  <p>Lỗi khi tải dữ liệu. Vui lòng thử lại sau.</p>
                  <button id="retryFetchBtn" class="btn btn-secondary-outline">Thử lại</button>
             </div>
        </div>

    </div>
</section>

<%- include('partials/footer') %>

<!-- Page Specific JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- GSAP & Config ---
    if (typeof gsap === 'undefined') { console.error("GSAP not loaded!"); return; }
    gsap.registerPlugin(ScrollTrigger);
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // --- DOM Refs ---
    const liveListContainer = document.getElementById('liveListContainer');
    const liveListUl = document.getElementById('liveList');
    const loadingGrid = document.querySelector('.loading-placeholder-grid');
    const noStreamsMessage = document.getElementById('noStreamsMessage');
    const errorMessage = document.getElementById('errorMessage');
    const retryBtn = document.getElementById('retryFetchBtn');
    const statusIndicator = document.querySelector('.status-indicator');
    let updateIntervalId = null; // To store the interval ID
    let currentLiveIds = new Set(); // To track IDs currently displayed

    // --- API Endpoint ---
    const API_URL = 'https://live-hoctap-9a3.glitch.me/api/rooms'; // Replace if needed
    const TOKEN_URL = '/live/getToken'; // Your internal endpoint

    // --- Fetch and Render Logic ---
    async function fetchAndRenderLives() {
        console.log("Fetching live streams...");
        if (statusIndicator) statusIndicator.classList.add('loading');
        if (errorMessage) errorMessage.style.display = 'none'; // Hide previous error

        try {
            const response = await fetch(API_URL);
            if (!response.ok) {
                throw new Error(`API Error: ${response.status} ${response.statusText}`);
            }
            const lives = await response.json();

            // Hide loading placeholders if they are visible
            if (loadingGrid && loadingGrid.style.display !== 'none') {
                 if (!prefersReducedMotion) {
                     gsap.to(loadingGrid, { duration: 0.3, autoAlpha: 0, onComplete: () => loadingGrid.style.display = 'none' });
                 } else {
                     loadingGrid.style.display = 'none';
                 }
            }
             if (liveListUl) liveListUl.style.display = ''; // Ensure UL is potentially visible

            updateLiveList(lives); // Call the update function

        } catch (err) {
            console.error("Error fetching live streams:", err);
            if (errorMessage) errorMessage.style.display = 'flex';
            if (liveListUl) liveListUl.innerHTML = ''; // Clear list on error
            if (loadingGrid) loadingGrid.style.display = 'none'; // Hide loading
            if (noStreamsMessage) noStreamsMessage.style.display = 'none'; // Hide 'no streams'
            stopAutoUpdate(); // Stop trying if error occurs
        } finally {
             if (statusIndicator) statusIndicator.classList.remove('loading');
        }
    }

    // --- Update List with Animations ---
    function updateLiveList(livesData) {
        if (!liveListUl) return;

        const newLiveIds = new Set(livesData.map(live => live.id));
        const parentContainer = liveListContainer; // Animate within this container

        // 1. Remove streams that are no longer present
        const itemsToRemove = [];
        liveListUl.querySelectorAll('.live-stream-card').forEach(card => {
            const cardId = card.dataset.roomId;
            if (!newLiveIds.has(cardId)) {
                itemsToRemove.push(card);
                currentLiveIds.delete(cardId); // Update tracked IDs
            }
        });

        // 2. Update existing streams and add new ones
        const itemsToAdd = [];
        livesData.forEach((live, index) => {
            const existingCard = liveListUl.querySelector(`.live-stream-card[data-room-id="${live.id}"]`);
            if (existingCard) {
                // Update content (simple innerHTML update for now, could be more granular)
                 // Avoid full innerHTML replace if possible for performance, update specific parts
                 const viewersEl = existingCard.querySelector('.viewer-count .count');
                 const onlineTimeEl = existingCard.querySelector('.online-time .time');
                 if (viewersEl) viewersEl.textContent = live.viewers || 0;
                 if (onlineTimeEl) onlineTimeEl.textContent = live.onlineTime || 'N/A';
                 // Add/remove active class based on some criteria if needed
                 // existingCard.classList.toggle('active-stream', live.isActive); // Example
            } else {
                // Create new card element (initially hidden for animation)
                const card = createLiveCardElement(live);
                if (card) {
                     itemsToAdd.push(card);
                     currentLiveIds.add(live.id); // Add new ID to tracked set
                }
            }
        });

        // --- GSAP Timeline for Updates ---
        if (!prefersReducedMotion) {
            const tl = gsap.timeline({
                 onComplete: () => {
                     attachActionHandlers(); // Re-attach handlers after DOM changes
                     ScrollTrigger.refresh(); // Refresh triggers if layout changed significantly
                     checkEmptyState(); // Check if list is empty after updates
                 }
             });

             // Animate removals
             if (itemsToRemove.length > 0) {
                 tl.to(itemsToRemove, {
                     duration: 0.4,
                     autoAlpha: 0,
                     scale: 0.9,
                     stagger: 0.05,
                     ease: 'power1.in',
                     onComplete: () => itemsToRemove.forEach(item => item.remove()) // Remove from DOM after animation
                 });
             }

             // Append new items to UL (hidden) and animate additions
             if (itemsToAdd.length > 0) {
                 itemsToAdd.forEach(item => liveListUl.appendChild(item)); // Add to DOM hidden
                 tl.from(itemsToAdd, {
                     duration: 0.6,
                     autoAlpha: 0,
                     y: 50,
                     scale: 0.95,
                     stagger: 0.1, // Stagger new items in
                     ease: 'power3.out'
                 }, itemsToRemove.length > 0 ? "-=0.2" : "+=0"); // Overlap slightly if removals happened
             }
        } else {
            // Non-animated update
            itemsToRemove.forEach(item => item.remove());
            itemsToAdd.forEach(item => liveListUl.appendChild(item));
             gsap.set(itemsToAdd, { autoAlpha: 1 }); // Make sure added items are visible
             attachActionHandlers();
             checkEmptyState();
        }
    }

     // --- Check if List is Empty ---
     function checkEmptyState() {
         const hasItems = liveListUl && liveListUl.children.length > 0;
         if (noStreamsMessage) noStreamsMessage.style.display = hasItems ? 'none' : 'flex';
     }


    // --- Create Live Card Element ---
    function createLiveCardElement(live) {
        if (!live || !live.id) return null;
        const card = document.createElement('li'); // Use li as it's inside a ul
        card.className = "live-stream-card"; // Use the new specific class
        card.dataset.roomId = live.id;
        // Add initial hidden state for GSAP
        gsap.set(card, { autoAlpha: 1 });

        // Sanitize inputs (basic example)
        const title = escapeHtml(live.title || 'Không có tiêu đề');
        const owner = escapeHtml(live.owner || 'Ẩn danh');
        const createdAt = live.createdAt ? new Date(live.createdAt).toLocaleString('vi-VN') : 'N/A';
        const onlineTime = escapeHtml(live.onlineTime || 'N/A');
        const viewers = live.viewers || 0;
        const joinUrl = `#`; // Link initially points nowhere, JS handles logic
        const shareUrl = `https://hoctap-9a3.glitch.me/live/joinLive/${live.id}`; // Direct join link for sharing

        card.innerHTML = `
            <div class="card-glow-effect"></div>
            <div class="card-live-indicator">
                <span class="live-dot"></span>LIVE
            </div>
            <div class="card-main-content">
                <h3 class="live-title">${title}</h3>
                <p class="live-owner-info">
                    <i class="fas fa-user-circle"></i> Chủ phòng: <span>${owner}</span>
                </p>
                <div class="live-meta-details">
                    <span class="detail-item viewer-count" title="Người xem">
                        <i class="fas fa-users"></i> <span class="count">${viewers}</span>
                    </span>
                    <span class="detail-item online-time" title="Thời gian online">
                        <i class="far fa-clock"></i> <span class="time">${onlineTime}</span>
                    </span>
                    <span class="detail-item created-date" title="Tạo lúc">
                        <i class="far fa-calendar-alt"></i> <span>${createdAt}</span>
                    </span>
                </div>
            </div>
            <div class="card-actions-overlay">
                <a href="${joinUrl}" class="btn btn-join-live loading-link live-link-action" data-room-id="${live.id}">
                    <i class="fas fa-play-circle"></i> Tham gia
                </a>
                <button class="btn btn-share-live share-link-action" data-share-url="${shareUrl}" title="Chia sẻ link">
                    <i class="fas fa-share-alt"></i>
                </button>
            </div>
        `;
        return card;
    }

    // --- HTML Escaping Helper ---
    function escapeHtml(unsafe) {
        if (!unsafe) return "";
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#39;");
    }

    // --- Attach Event Handlers for Join/Share ---
    function attachActionHandlers() {
        // Remove previous listeners to avoid duplicates if called multiple times
        liveListUl.querySelectorAll('.live-link-action').forEach(link => {
            link.replaceWith(link.cloneNode(true)); // Clone to remove listeners
        });
        liveListUl.querySelectorAll('.share-link-action').forEach(btn => {
             btn.replaceWith(btn.cloneNode(true));
        });

        // Attach Join Link Handler
        liveListUl.querySelectorAll('.live-link-action').forEach(link => {
            link.addEventListener('click', handleJoinClick);
        });

        // Attach Share Button Handler
        liveListUl.querySelectorAll('.share-link-action').forEach(btn => {
            btn.addEventListener('click', handleShareClick);
        });

        // Re-attach loading link handler
         liveListUl.querySelectorAll(".loading-link").forEach(anchor => {
            anchor.addEventListener("click", handleLoadingLinkClick);
        });
    }

     // Separate handler functions
     async function handleJoinClick(e) {
        e.preventDefault();
        const card = e.target.closest('.live-stream-card');
        const roomId = card?.dataset.roomId;
        if (!roomId) return;

         console.log(`Attempting to join room: ${roomId}`);
         // Add visual loading state to button/card
         card?.classList.add('joining');
         const overlay = document.getElementById("loading-overlay");
         if (overlay) overlay.classList.add("active");

        try {
            const res = await fetch(`${TOKEN_URL}?roomId=${roomId}`);
            const data = await res.json();
            if (!res.ok || data.error) {
                 throw new Error(data.error || `Lỗi ${res.status}`);
            }
             // Redirect with token
             window.location.href = `https://live-hoctap-9a3.glitch.me/room/${roomId}?token=${data.token}`;
             // No need to remove loading state here as page redirects
        } catch (error) {
            console.error("Error getting join token:", error);
             showAlert(error.message || "Có lỗi xảy ra khi lấy token, vui lòng thử lại.", "error", 5000);
             // Remove loading state on error
             card?.classList.remove('joining');
             if (overlay) overlay.classList.remove("active");
        }
    }

    function handleShareClick(e) {
        e.preventDefault(); // Prevent link navigation if nested
        e.stopPropagation();
        const btn = e.target.closest('.share-link-action');
        const shareUrl = btn?.dataset.shareUrl;
        if (!shareUrl) return;

         if (navigator.clipboard) {
             navigator.clipboard.writeText(shareUrl).then(() => {
                 showAlert("Đã copy link chia sẻ!", "success", 2500);
                 // Optional: Add visual feedback to button
                 btn.classList.add('copied');
                 setTimeout(() => btn.classList.remove('copied'), 1500);
             }).catch(err => {
                 console.error("Clipboard write failed: ", err);
                 showAlert("Không thể tự động copy link.", "error", 3000);
                  prompt("Lỗi copy tự động. Vui lòng sao chép thủ công:", shareUrl); // Fallback prompt
             });
         } else {
             // Fallback for older browsers
             prompt("Trình duyệt không hỗ trợ copy tự động. Vui lòng sao chép link:", shareUrl);
         }
    }

     function handleLoadingLinkClick(e) {
         const overlay = document.getElementById("loading-overlay");
         if (this.target !== "_blank" && !this.href.endsWith('#') && !this.href.startsWith('javascript:') && overlay && !overlay.classList.contains('active')) {
              if (this.href !== window.location.href + '#' && this.href !== window.location.href) {
                   overlay.classList.add("active");
              }
         }
     }


    // --- Auto Update Logic ---
    function startAutoUpdate(interval = 30000) { // Default 30 seconds
         console.log(`Starting auto-update every ${interval / 1000}s`);
         // Clear existing interval if any
         stopAutoUpdate();
         // Fetch immediately first
         fetchAndRenderLives();
         // Then set interval
         updateIntervalId = setInterval(fetchAndRenderLives, interval);
    }

    function stopAutoUpdate() {
         if (updateIntervalId) {
             console.log("Stopping auto-update.");
             clearInterval(updateIntervalId);
             updateIntervalId = null;
         }
    }

    // --- Retry Button ---
     retryBtn?.addEventListener('click', () => {
         errorMessage.style.display = 'none'; // Hide error
         loadingGrid.style.display = 'grid'; // Show loading
         startAutoUpdate(); // Retry fetching and restart interval
     });


    // --- Initial Load ---
    startAutoUpdate(60000); // Start fetching and set interval

    // Optional: Stop updates when page is not visible to save resources
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            stopAutoUpdate();
        } else {
            startAutoUpdate(); // Restart updates when tab becomes visible
        }
    });

    // Initial page animations (header, etc.)
     if (!prefersReducedMotion) {
         gsap.from('.live-list-header > *', {
             duration: 0.8,
             y: -30,
             autoAlpha: 0,
             stagger: 0.15,
             ease: 'power3.out',
             delay: 0.2
         });
          // Loading placeholders fade in (optional, can be CSS only)
          gsap.from('.loading-placeholder-grid .placeholder-card', {
             duration: 0.5,
             autoAlpha: 0,
             stagger: 0.1,
             delay: 0.5
          });
     }


}); // End DOMContentLoaded
</script>